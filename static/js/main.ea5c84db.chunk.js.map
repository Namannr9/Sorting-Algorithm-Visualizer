{"version":3,"sources":["VisualizerController.js","SortingVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["VisualizerController","props","state","sortingAlgorithm","speed","size","barColor","pointerColor","sortedColor","message","onSelectingSortingAlgorithm","bind","onSelectingSpeed","onSelectingSize","onSelectingBarColor","onSelectingPointerColor","onSelectingSortedColor","randomize","sort","randomizeRef","React","createRef","sortRef","this","visualizerData","current","textContent","eventKey","event","setState","document","getElementsByClassName","innerHTML","someInfo","console","log","temp","update","controllerDataHandler","disabled","getElementById","className","Container","SplitButton","title","id","variant","onSelect","Dropdown","Item","Divider","Button","ref","onClick","Component","Tuple","first","second","operation","SortingVisualizer","arr","sorted","width","height","window","screen","controllerData","Set","parseInt","add","getRandomElement","Array","from","getColor","previousProps","previousState","cd","cocktailSort","heapSort","insertionSort","linearSort","mergeSortUtil","quickSortUtil","selectionSort","bubbleSort","newState","bars","e","length","style","backgroundColor","visualizerDataHandler","n","i","j","eIndex","f","fIndex","gValue","gWidth","sleep","getSpeed","swapped","start","end","Math","floor","x","y","tempWidth","leftIndex","rightIndex","max","p","jValue","jWidth","g","graphics","slice","high","mergeSort","low","middle","merge","r","push","k","a","b","quickSort","pi","partition","pivot","m","ms","Promise","resolve","setTimeout","random","map","value","idx","key","getBarHeight","fontSize","getfontHeight","App","default","scrollIntoView","behavior","block","fluid","Row","Col","lg","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.ea5c84db.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Button from \"react-bootstrap/Button\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport SplitButton from \"react-bootstrap/SplitButton\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport \"./VisualizerController.css\";\nclass VisualizerController extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sortingAlgorithm: \"Bubble Sort\",\n      speed: \"Normal\",\n      size: \"20\",\n      barColor: \"Blue\",\n      pointerColor: \"Cyan\",\n      sortedColor: \"Green\",\n      message: \"Feeling lazy ? its OK , just click Sort ! \",\n    };\n    this.onSelectingSortingAlgorithm = this.onSelectingSortingAlgorithm.bind(this);\n    this.onSelectingSpeed = this.onSelectingSpeed.bind(this);\n    this.onSelectingSize = this.onSelectingSize.bind(this);\n    this.onSelectingBarColor = this.onSelectingBarColor.bind(this);\n    this.onSelectingPointerColor = this.onSelectingPointerColor.bind(this);\n    this.onSelectingSortedColor = this.onSelectingSortedColor.bind(this);\n    this.randomize = this.randomize.bind(this);\n    this.sort = this.sort.bind(this);\n    this.randomizeRef = React.createRef();\n    this.sortRef = React.createRef();\n  }\n  componentDidUpdate() {\n    if (this.props.visualizerData === true) {\n      this.randomizeRef.current.textContent = \"Randomize Array\";\n    }\n  }\n  onSelectingSortingAlgorithm(eventKey, event) {\n    this.setState({\n      sortingAlgorithm: eventKey,\n    });\n    //console.log(eventKey);\n    let item=document.getElementsByClassName('inf');\n    item[0].innerHTML=this.someInfo(eventKey);\n    //console.log(item)\n    \n  }\n  someInfo(eventKey)\n  {\n    console.log(eventKey)\n    switch(eventKey)\n    {\n      case \"Bubble Sort\" :\n        return \"Bubble Sort <br> Time Complexcity : O(n^2) <br> Space Complexcity O(1)\";\n        \n\n      case \"Linear Sort\" :\n        return \"Linear Sort <br> Time Complexcity : O(n^2) <br> Space Complexcity O(1)\"\n      \n      case \"Selection Sort\" :\n        return \"Selection Sort <br> Time Complexcity : O(n^2) <br> Space Complexcity O(1)\"\n      case \"Insertion Sort\" :\n        return \"Insertion Sort <br> Time Complexcity : O(n^2) <br> Space Complexcity O(1)\"\n      case \"Heap Sort\" :\n        return \"Heap Sort <br> Time Complexcity : O(nlog(n)) <br> Space Complexcity O(1)\"\n      case \"Merge Sort\" :\n        return \"Merge Sort <br> Time Complexcity : O(nlog(n)) <br> Space Complexcity O(n)\"\n      case \"Quick Sort\":\n        return \"Quick Sort <br> Time Complexcity : O(n^2) <br> Space Complexcity O(log(n))\"\n    }\n  }\n  onSelectingSpeed(eventKey, event) {\n    this.setState({\n      speed: eventKey,\n    });\n  }\n  onSelectingSize(eventKey, event) {\n    let temp = this.update();\n    temp[\"sort\"] = false;\n    temp[\"randomize\"] = true;\n    temp[\"size\"] = eventKey;\n    this.setState(temp, function () {\n      this.props.controllerDataHandler(this.state);\n    });\n  }\n  onSelectingBarColor(eventKey, event) {\n    let temp = this.update();\n    temp[\"sort\"] = false;\n    temp[\"randomize\"] = false;\n    temp[\"barColor\"] = eventKey;\n    this.setState(temp, function () {\n      this.props.controllerDataHandler(this.state);\n    });\n  }\n  onSelectingPointerColor(eventKey, event) {\n    this.setState({\n      pointerColor: eventKey,\n    });\n  }\n  onSelectingSortedColor(eventKey, event) {\n    this.setState({\n      sortedColor: eventKey,\n    });\n  }\n  update() {\n    var temp = {\n      sortingAlgorithm: \"\",\n      speed: \"\",\n      size: \"\",\n      barColor: \"\",\n      pointerColor: \"\",\n      sortedColor: \"\",\n    };\n    temp.sortingAlgorithm = this.state.sortingAlgorithm;\n    temp.size = this.state.size;\n    temp.speed = this.state.speed;\n    temp.barColor = this.state.barColor;\n    temp.pointerColor = this.state.pointerColor;\n    temp.sortedColor = this.state.sortedColor;\n    return temp;\n  }\n  randomize() {\n    this.randomizeRef.current.textContent = \"Randomize Array\";\n    this.sortRef.current.disabled = false;\n    document.getElementById(\"speed\").disabled = false;\n    document.getElementById(\"size\").disabled = false;\n    document.getElementById(\"sortingAlogrithm\").disabled = false;\n    document.getElementById(\"barColor\").disabled = false;\n    //document.getElementById(\"pointerColor\").disabled = false;\n    //document.getElementById(\"sortedColor\").disabled = false;\n    let temp = this.update();\n    temp[\"sort\"] = false;\n    temp[\"randomize\"] = true;\n    this.setState(temp, function () {\n      this.props.controllerDataHandler(this.state);\n    });\n  }\n  sort() {\n    this.randomizeRef.current.textContent = \"Stop & Randomize Array\";\n    this.sortRef.current.disabled = true;\n    document.getElementById(\"speed\").disabled = true;\n    document.getElementById(\"size\").disabled = true;\n    document.getElementById(\"sortingAlogrithm\").disabled = true;\n    document.getElementById(\"barColor\").disabled = true;\n    //document.getElementById(\"pointerColor\").disabled = true;\n    //document.getElementById(\"sortedColor\").disabled = true;\n    let temp = this.update();\n    temp[\"sort\"] = true;\n    temp[\"randomize\"] = false;\n    temp[\"sorted\"] = false;\n    this.setState(temp, function () {\n      this.props.controllerDataHandler(this.state);\n    });\n  }\n  render() {\n    return (\n      <div className=\"VisualizerController\">\n        <Container>\n            <SplitButton\n              title={this.state.sortingAlgorithm}\n              id=\"sortingAlogrithm\"\n              variant=\"light\"\n              onSelect={this.onSelectingSortingAlgorithm}\n            >\n              <Dropdown.Item disabled>Sorting Algorithms</Dropdown.Item>\n              <Dropdown.Divider />\n              <Dropdown.Item eventKey=\"Bubble Sort\">\n                Bubble Sort (Default)\n            </Dropdown.Item>\n              <Dropdown.Item eventKey=\"Linear Sort\">Linear Sort</Dropdown.Item>\n              \n            <Dropdown.Item eventKey=\"Selection Sort\">\n              Selection Sort\n            </Dropdown.Item>\n\n            <Dropdown.Item eventKey=\"Insertion Sort\">\n              Insertion Sort\n            </Dropdown.Item>\n\n              <Dropdown.Item eventKey=\"Heap Sort\">Heap Sort</Dropdown.Item>\n              \n              <Dropdown.Item eventKey=\"Merge Sort\">Merge Sort</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Quick Sort\">Quick Sort</Dropdown.Item>\n            </SplitButton>\n            &nbsp;&nbsp;&nbsp;\n            <SplitButton\n              title={this.state.speed}\n              id=\"speed\"\n              variant=\"light\"\n              onSelect={this.onSelectingSpeed}\n            >\n              <Dropdown.Item disabled>Speed Of Visualization</Dropdown.Item>\n              <Dropdown.Divider />\n              <Dropdown.Item eventKey=\"Very Fast\">Very fast</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Fast\">Fast</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Normal\">Normal (Default)</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Slow\">Slow</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Very Slow\">Very Slow</Dropdown.Item>\n            </SplitButton>\n            &nbsp;&nbsp;&nbsp;\n            <SplitButton\n              title={this.state.size}\n              id=\"size\"\n              variant=\"light\"\n              onSelect={this.onSelectingSize}\n            >\n              <Dropdown.Item disabled>Size Of Array</Dropdown.Item>\n              <Dropdown.Divider />\n              <Dropdown.Item eventKey=\"10\">10</Dropdown.Item>\n              <Dropdown.Item eventKey=\"15\">15</Dropdown.Item>\n              <Dropdown.Item eventKey=\"20\">20 (Default)</Dropdown.Item>\n              <Dropdown.Item eventKey=\"25\">25</Dropdown.Item>\n              <Dropdown.Item eventKey=\"30\">30</Dropdown.Item>\n              <Dropdown.Item eventKey=\"35\">35</Dropdown.Item>\n              \n            </SplitButton>\n            &nbsp;&nbsp;&nbsp;\n            <SplitButton\n              title={this.state.barColor}\n              id=\"barColor\"\n              variant=\"light\"\n              onSelect={this.onSelectingBarColor}\n            >\n              <Dropdown.Item disabled>Color Of Bar</Dropdown.Item>\n              <Dropdown.Divider />\n              <Dropdown.Item eventKey=\"Black\">Black</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Blue\">Blue (Default)</Dropdown.Item>\n\n\n              <Dropdown.Item eventKey=\"Pink\">Pink</Dropdown.Item>\n\n              <Dropdown.Item eventKey=\"Grey\">Grey</Dropdown.Item>\n            </SplitButton>\n            &nbsp;&nbsp;&nbsp;\n            {/* <SplitButton\n              title={this.state.pointerColor}\n              id=\"pointerColor\"\n              variant=\"light\"\n              onSelect={this.onSelectingPointerColor}\n            >\n              <Dropdown.Item disabled>Color Of Comparisions</Dropdown.Item>\n              <Dropdown.Divider />\n              <Dropdown.Item eventKey=\"Black\">Black</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Blue\">Blue</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Cyan\">Cyan</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Green\">Green</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Pink\">Pink</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Red\">Red (Default)</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Yellow\">Yellow</Dropdown.Item>\n            </SplitButton>\n            &nbsp;&nbsp;&nbsp;\n            <SplitButton\n              title={this.state.sortedColor}\n              id=\"sortedColor\"\n              variant=\"light\"\n              onSelect={this.onSelectingSortedColor}\n            >\n              <Dropdown.Item disabled>Color Of Sorted Elements</Dropdown.Item>\n              <Dropdown.Divider />\n              <Dropdown.Item eventKey=\"Black\">Black</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Blue\">Blue</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Cyan\">Cyan</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Green\">Green (Default)</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Pink\">Pink</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Red\">Red</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Yellow\">Yellow</Dropdown.Item>\n            </SplitButton>\n            &nbsp;&nbsp;&nbsp; */}\n            <Button\n              ref={this.randomizeRef}\n              size=\"lg\"\n              variant=\"danger\"\n              onClick={this.randomize}\n            >\n              Randomize Array\n            </Button>\n            &nbsp;&nbsp;&nbsp;\n            <Button\n              ref={this.sortRef}\n              size=\"lg\"\n              variant=\"success\"\n              onClick={this.sort}\n            >\n              Sort !\n            </Button>\n          \n        </Container>\n      </div>\n    );\n  }\n}\nexport default VisualizerController;\n","import React from \"react\";\nimport \"./SortingVisualizer.css\";\n\nclass Tuple {\n  constructor(first, second, operation) {\n    this.first = first;\n    this.second = second;\n    this.operation = operation;\n  }\n}\n\nclass SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      arr: [],\n      sortingAlgorithm: \"\",\n      size: \"\",\n      speed: \"\",\n      barColor: \"\",\n      pointerColor: \"\",\n      sort: false,\n      randomize: false,\n    };\n    this.sorted = false;\n    this.width = 0;\n    this.height = 0;\n  }\n\n  componentDidMount() {\n    console.log(\"Console did mount\")\n    this.width = window.screen.width;\n    this.height = window.screen.height;\n    \n    \n    let controllerData = this.props.controllerData;\n    let temp = new Set();\n    while (temp.size !== parseInt(controllerData[\"size\"])) {\n      temp.add(this.getRandomElement());\n    }\n    temp = Array.from(temp);\n    this.setState({\n      arr: temp,\n      sortingAlgorithm: controllerData[\"sortingAlgorithm\"],\n      size: controllerData[\"size\"],\n      speed: controllerData[\"speed\"],\n      barColor: this.getColor(controllerData[\"barColor\"]),\n      pointerColor: this.getColor(controllerData[\"pointerColor\"]),\n      sortedColor: this.getColor(controllerData[\"sortedColor\"]),\n      sort: controllerData[\"sort\"],\n      randomize: controllerData[\"randomize\"],\n    });\n  }\n\n  componentDidUpdate(previousProps, previousState) {\n    //console.log(\"Component did update mount\")\n    if (previousProps.controllerData !== this.props.controllerData) {\n      let controllerData = this.props.controllerData;\n      let cd = {};\n      if (controllerData[\"sort\"] === true) {\n        cd = {\n          sortingAlgorithm: controllerData[\"sortingAlgorithm\"],\n          size: controllerData[\"size\"],\n          speed: controllerData[\"speed\"],\n          barColor: this.getColor(controllerData[\"barColor\"]),\n          pointerColor: this.getColor(controllerData[\"pointerColor\"]),\n          sortedColor: this.getColor(controllerData[\"sortedColor\"]),\n          sort: controllerData[\"sort\"],\n          randomize: controllerData[\"randomize\"],\n        };\n        switch (controllerData.sortingAlgorithm) {\n          case \"Cocktail Sort\":\n            this.setState(cd, function () {\n              this.cocktailSort();\n            });\n            break;\n\n          case \"Heap Sort\":\n            this.setState(cd, function () {\n              this.heapSort();\n            });\n            break;\n\n          case \"Insertion Sort\":\n            this.setState(cd, function () {\n              this.insertionSort();\n            });\n            break;\n\n          case \"Linear Sort\":\n            this.setState(cd, function () {\n              this.linearSort();\n            });\n            break;\n\n          case \"Merge Sort\":\n            this.setState(cd, function () {\n              this.mergeSortUtil();\n            });\n            break;\n\n          case \"Quick Sort\":\n            this.setState(cd, function () {\n              this.quickSortUtil();\n            });\n            break;\n\n          case \"Selection Sort\":\n            this.setState(cd, function () {\n              this.selectionSort();\n              console.log(\"Selection sort\")\n            });\n            break;\n\n          default:\n            this.setState(cd, function () {\n              this.bubbleSort();\n              //console.log(\"bubble sort\")\n            });\n            break;\n        }\n      } // if sort=== true ends\n      else {\n        let newState = {};\n        let temp = new Set();\n        if (parseInt(this.state[\"size\"]) !== parseInt(controllerData[\"size\"])) {\n          newState[\"sortingAlgorithm\"] = controllerData[\"sortingAlgorithm\"];\n          newState[\"size\"] = parseInt(controllerData[\"size\"]);\n          newState[\"speed\"] = controllerData[\"speed\"];\n          newState[\"barColor\"] = this.getColor(controllerData[\"barColor\"]);\n          newState[\"pointerColor\"] = this.getColor(\n            controllerData[\"pointerColor\"]\n          );\n          newState[\"sortedColor\"] = this.getColor(\n            controllerData[\"sortedColor\"]\n          );\n          newState[\"randomize\"] = controllerData[\"randomize\"];\n          newState[\"sort\"] = controllerData[\"sort\"];\n          while (temp.size !== newState[\"size\"]) {\n            temp.add(this.getRandomElement());\n          }\n          temp = Array.from(temp);\n          newState[\"arr\"] = temp;\n        } else {\n          if (controllerData[\"randomize\"] === true) {\n            newState[\"sortingAlgorithm\"] = controllerData[\"sortingAlgorithm\"];\n            newState[\"size\"] = parseInt(controllerData[\"size\"]);\n            newState[\"speed\"] = controllerData[\"speed\"];\n            newState[\"barColor\"] = this.getColor(controllerData[\"barColor\"]);\n            newState[\"pointerColor\"] = this.getColor(\n              controllerData[\"pointerColor\"]\n            );\n            newState[\"sortedColor\"] = this.getColor(\n              controllerData[\"sortedColor\"]\n            );\n            newState[\"randomize\"] = controllerData[\"randomize\"];\n            newState[\"sort\"] = controllerData[\"sort\"];\n            while (temp.size !== newState[\"size\"]) {\n              temp.add(this.getRandomElement());\n            }\n            temp = Array.from(temp);\n            newState[\"arr\"] = temp;\n            let bars = document.getElementsByClassName(\"array-bar\");\n            for (let e = 0; e < bars.length; e++)\n              bars[e].style.backgroundColor = newState[\"barColor\"];\n          } else {\n            newState[\"sortingAlgorithm\"] = controllerData[\"sortingAlgorithm\"];\n            newState[\"size\"] = parseInt(controllerData[\"size\"]);\n            newState[\"barColor\"] = this.getColor(controllerData[\"barColor\"]);\n            newState[\"pointerColor\"] = this.getColor(\n              controllerData[\"pointerColor\"]\n            );\n            newState[\"sortedColor\"] = this.getColor(\n              controllerData[\"sortedColor\"]\n            );\n            newState[\"speed\"] = controllerData[\"speed\"];\n            newState[\"arr\"] = this.state.arr;\n          }\n        }\n        this.setState(newState);\n      }// else sort==false\n    }\n  } //component did update ends\n\n\n  //--------------------------SORTING ALGORITHMS STARTS FROM HERE--------------------------------\n  async bubbleSort() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let bars = document.getElementsByClassName(\"array-bar\");\n    let n = bars.length;\n    let e, f, eIndex, fIndex;\n    for (let i = 0; i < n - 1; i++) {\n      for (let j = 0; j < n - i - 1; j++) {\n        bars[j].style.backgroundColor = this.state.pointerColor;\n        \n        bars[j + 1].style.backgroundColor = this.state.pointerColor;\n        \n        e = parseInt(bars[j].innerHTML);\n        eIndex = j;\n        f = parseInt(bars[j + 1].innerHTML);\n        fIndex = j + 1;\n        if (e > f) {\n          let gValue = bars[eIndex].innerHTML;\n          let gWidth = bars[eIndex].style.width;\n          bars[eIndex].innerHTML = bars[fIndex].innerHTML;\n          bars[eIndex].style.width = bars[fIndex].style.width;\n          bars[fIndex].innerHTML = gValue;\n          bars[fIndex].style.width = gWidth;\n          if (this.state.randomize === true) return;\n          await this.sleep(this.getSpeed(this.state.speed));\n          if (this.state.randomize === true) return;\n        }\n        bars[j].style.backgroundColor = this.state.barColor;\n        \n        bars[j + 1].style.backgroundColor = this.state.barColor;\n        \n      }\n      bars[n - i - 1].style.backgroundColor = this.state.sortedColor;\n    }\n    bars[0].style.backgroundColor = this.state.sortedColor;\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  async cocktailSort() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let bars = document.getElementsByClassName(\"array-bar\");\n    let n = bars.length;\n    let swapped = true;\n    let start = 0;\n    let end = n - 1;\n    let gValue, gWidth;\n    while (swapped) {\n      swapped = false;\n      for (let i = start; i < end; ++i) {\n        if (parseInt(bars[i].innerHTML) > parseInt(bars[i + 1].innerHTML)) {\n          bars[i].style.backgroundColor = this.state.pointerColor;\n          bars[i + 1].style.backgroundColor = this.state.pointerColor;\n          if (this.state.randomize === true) return;\n          await this.sleep(this.getSpeed(this.state.speed));\n          if (this.state.randomize === true) return;\n          bars[i].style.backgroundColor = this.state.barColor;\n          bars[i + 1].style.backgroundColor = this.state.barColor;\n          gValue = parseInt(bars[i].innerHTML);\n          gWidth = bars[i].style.width;\n          bars[i].innerHTML = parseInt(bars[i + 1].innerHTML);\n          bars[i].style.width = bars[i + 1].style.width;\n          bars[i + 1].innerHTML = gValue;\n          bars[i + 1].style.width = gWidth;\n          swapped = true;\n        }\n      }\n      if (!swapped) break;\n      swapped = false;\n      bars[end].style.backgroundColor = this.state.sortedColor;\n      --end;\n      for (let i = end - 1; i >= start; --i) {\n        if (parseInt(bars[i].innerHTML) > parseInt(bars[i + 1].innerHTML)) {\n          bars[i].style.backgroundColor = this.state.pointerColor;\n          bars[i + 1].style.backgroundColor = this.state.pointerColor;\n          if (this.state.randomize === true) return;\n          await this.sleep(this.getSpeed(this.state.speed));\n          if (this.state.randomize === true) return;\n          bars[i].style.backgroundColor = this.state.barColor;\n          bars[i + 1].style.backgroundColor = this.state.barColor;\n          gValue = parseInt(bars[i].innerHTML);\n          gWidth = bars[i].style.width;\n          bars[i].innerHTML = parseInt(bars[i + 1].innerHTML);\n          bars[i].style.width = bars[i + 1].style.width;\n          bars[i + 1].innerHTML = gValue;\n          bars[i + 1].style.width = gWidth;\n          swapped = true;\n        }\n      }\n      bars[start].style.backgroundColor = this.state.sortedColor;\n      ++start;\n    }\n    let i = start;\n    let j = end;\n    while (i <= j) {\n      bars[j].style.backgroundColor = this.state.sortedColor;\n      bars[i].style.backgroundColor = this.state.sortedColor;\n      i++;\n      j--;\n    }\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  async heapSort() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let arr = document.getElementsByClassName(\"array-bar\");\n    let temp, tempWidth;\n    let leftIndex, rightIndex, x, y;\n    let end;\n    //building heap\n    for (let e = 1; e < arr.length; e++) {\n      let i = e;\n      while (i > 0) {\n        if (\n          parseInt(arr[i].innerHTML) >\n          parseInt(arr[Math.floor((i - 1) / 2)].innerHTML)\n        ) {\n          x = i;\n          y = Math.floor((i - 1) / 2);\n          temp = arr[x].innerHTML;\n          tempWidth = arr[x].style.width;\n          arr[x].style.backgroundColor = this.state.pointerColor;\n          arr[y].style.backgroundColor = this.state.pointerColor;\n          arr[x].innerHTML = arr[y].innerHTML;\n          arr[x].style.width = arr[y].style.width;\n          arr[y].innerHTML = temp;\n          arr[y].style.width = tempWidth;\n          await this.sleep(this.getSpeed(this.state.speed));\n          arr[x].style.backgroundColor = this.state.barColor;\n          arr[y].style.backgroundColor = this.state.barColor;\n          i = y;\n        } else {\n          break;\n        }\n      }\n      if (this.state.randomize === true) return;\n      await this.sleep(this.getSpeed(this.state.speed));\n      if (this.state.randomize === true) return;\n    }\n    //heapify\n    for (let e = arr.length - 1; e > 0; e--) {\n      arr[0].style.backgroundColor = this.state.pointerColor;\n      arr[e].style.backgroundColor = this.state.pointerColor;\n      temp = arr[0].innerHTML;\n      tempWidth = arr[0].style.width;\n      arr[0].innerHTML = arr[e].innerHTML;\n      arr[0].style.width = arr[e].style.width;\n      arr[e].innerHTML = temp;\n      arr[e].style.width = tempWidth;\n      await this.sleep(this.getSpeed(this.state.speed));\n      arr[0].style.backgroundColor = this.state.barColor;\n      arr[e].style.backgroundColor = this.state.barColor;\n      end = e - 1;\n      let i = 0;\n      while (i <= end) {\n        leftIndex = 2 * i + 1;\n        if (leftIndex > end) break;\n        rightIndex = 2 * i + 2;\n        if (rightIndex > end) rightIndex = leftIndex;\n        if (\n          parseInt(arr[i].innerHTML) >=\n          Math.max(\n            parseInt(arr[leftIndex].innerHTML),\n            parseInt(arr[rightIndex].innerHTML)\n          )\n        )\n          break;\n        if (\n          parseInt(arr[leftIndex].innerHTML) >=\n          parseInt(arr[rightIndex].innerHTML)\n        ) {\n          x = i;\n          y = leftIndex;\n          arr[x].style.backgroundColor = this.state.pointerColor;\n          arr[y].style.backgroundColor = this.state.pointerColor;\n          temp = arr[x].innerHTML;\n          tempWidth = arr[x].style.width;\n          arr[x].innerHTML = arr[y].innerHTML;\n          arr[x].style.width = arr[y].style.width;\n          arr[y].innerHTML = temp;\n          arr[y].style.width = tempWidth;\n          await this.sleep(this.getSpeed(this.state.speed));\n          arr[x].style.backgroundColor = this.state.barColor;\n          arr[y].style.backgroundColor = this.state.barColor;\n          i = leftIndex;\n        } else {\n          x = i;\n          y = rightIndex;\n          arr[x].style.backgroundColor = this.state.pointerColor;\n          arr[y].style.backgroundColor = this.state.pointerColor;\n          temp = arr[x].innerHTML;\n          tempWidth = arr[x].style.width;\n          arr[x].innerHTML = arr[y].innerHTML;\n          arr[x].style.width = arr[y].style.width;\n          arr[y].innerHTML = temp;\n          arr[y].style.width = tempWidth;\n          if (this.state.randomize === true) return;\n          await this.sleep(this.getSpeed(this.state.speed));\n          if (this.state.randomize === true) return;\n          arr[x].style.backgroundColor = this.state.barColor;\n          arr[y].style.backgroundColor = this.state.barColor;\n          i = rightIndex;\n        }\n      }\n      if (this.state.randomize === true) return;\n      await this.sleep(this.getSpeed(this.state.speed));\n      if (this.state.randomize === true) return;\n      arr[e].style.backgroundColor = this.state.sortedColor;\n    }\n    arr[0].style.backgroundColor = this.state.sortedColor;\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  async insertionSort() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let bars = document.getElementsByClassName(\"array-bar\");\n    let n = bars.length;\n    let p, g, gValue, gWidth, jValue, jWidth;\n    for (let i = 1; i <= n - 1; i++) {\n      p = i;\n      bars[i].style.backgroundColor = this.state.pointerColor;\n      gValue = parseInt(bars[p].innerHTML);\n      gWidth = bars[p].style.width;\n      for (let j = p - 1; j >= 0; j--, p--) {\n        jValue = parseInt(bars[j].innerHTML);\n        jWidth = bars[j].style.width;\n        g = j;\n        bars[g].style.backgroundColor = this.state.pointerColor;\n        if (gValue >= jValue) {\n          if (this.state.randomize === true) return;\n          await this.sleep(this.getSpeed(this.state.speed));\n          if (this.state.randomize === true) return;\n          bars[g].style.backgroundColor = this.state.sortedColor;\n          break;\n        }\n        bars[j + 1].innerHTML = jValue;\n        bars[j + 1].style.width = jWidth;\n        if (this.state.randomize === true) return;\n        await this.sleep(this.getSpeed(this.state.speed));\n        if (this.state.randomize === true) return;\n        bars[g].style.backgroundColor = this.state.sortedColor;\n      }\n      bars[i].style.backgroundColor = this.state.sortedColor;\n      bars[p].innerHTML = gValue;\n      bars[p].style.width = gWidth;\n    }\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  async linearSort() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let bars = document.getElementsByClassName(\"array-bar\");\n    let n = bars.length;\n    let i, j, gValue, gWidth;\n    i = 0;\n    while (i <= n - 2) {\n      j = i + 1;\n      while (j <= n - 1) {\n        bars[i].style.backgroundColor = this.state.pointerColor;\n        bars[j].style.backgroundColor = this.state.pointerColor;\n        if (parseInt(bars[j].innerHTML) < parseInt(bars[i].innerHTML)) {\n          bars[i].style.backgroundColor = this.state.pointerColor;\n          bars[j].style.backgroundColor = this.state.pointerColor;\n          if (this.state.randomize === true) return;\n          await this.sleep(this.getSpeed(this.state.speed));\n          if (this.state.randomize === true) return;\n          bars[i].style.backgroundColor = this.state.barColor;\n          bars[j].style.backgroundColor = this.state.barColor;\n          gValue = parseInt(bars[i].innerHTML);\n          gWidth = bars[i].style.width;\n          bars[i].innerHTML = parseInt(bars[j].innerHTML);\n          bars[i].style.width = bars[j].style.width;\n          bars[j].innerHTML = gValue;\n          bars[j].style.width = gWidth;\n        }\n        if (this.state.randomize === true) return;\n        await this.sleep(this.getSpeed(this.state.speed));\n        if (this.state.randomize === true) return;\n        bars[j].style.backgroundColor = this.state.barColor;\n        bars[i].style.backgroundColor = this.state.barColor;\n        j++;\n      }\n      bars[i].style.backgroundColor = this.state.sortedColor;\n      i++;\n    }\n    bars[n - 1].style.backgroundColor = this.state.sortedColor;\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  async mergeSortUtil() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let graphics = [];\n    let arr = this.state.arr.slice();\n    let low = 0;\n    let high = arr.length - 1;\n    this.mergeSort(arr, low, high, graphics);\n    let bars = document.getElementsByClassName(\"array-bar\");\n    for (let i = 0; i < graphics.length; i++) {\n      if (graphics[i].operation === \"add\") {\n        bars[graphics[i].first].style.backgroundColor = this.state.pointerColor;\n        bars[graphics[i].second].style.backgroundColor =\n          this.state.pointerColor;\n      }\n      if (graphics[i].operation === \"remove\") {\n        bars[graphics[i].first].style.backgroundColor = this.state.barColor;\n        bars[graphics[i].second].style.backgroundColor = this.state.barColor;\n      }\n      if (graphics[i].operation === \"swap\") {\n        bars[graphics[i].first].innerHTML = graphics[i].second;\n        bars[graphics[i].first].style.width = graphics[i].second + \"px\";\n        bars[graphics[i].first].style.backgroundColor = this.state.sortedColor;\n      }\n      if (this.state.randomize === true) return;\n      await this.sleep(this.getSpeed(this.state.speed));\n      if (this.state.randomize === true) return;\n    }\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  mergeSort(arr, low, high, graphics) {\n    if (low >= high) return;\n    var middle = Math.floor((low + high) / 2);\n    this.mergeSort(arr, low, middle, graphics);\n    this.mergeSort(arr, middle + 1, high, graphics);\n    this.merge(arr, low, high, graphics);\n  }\n\n  merge(arr, low, high, graphics) {\n    let middle = Math.floor((low + high) / 2);\n    let temp = new Array(high - low + 1);\n    let i = low;\n    let j = middle + 1;\n    let r = 0;\n    while (i <= middle && j <= high) {\n      graphics.push(new Tuple(i, j, \"add\"));\n      graphics.push(new Tuple(i, j, \"remove\"));\n      if (arr[i] <= arr[j]) {\n        temp[r] = arr[i];\n        r++;\n        i++;\n      } else {\n        temp[r] = arr[j];\n        r++;\n        j++;\n      }\n    }\n    while (i <= middle) {\n      graphics.push(new Tuple(i, i, \"add\"));\n      graphics.push(new Tuple(i, i, \"remove\"));\n      temp[r] = arr[i];\n      r++;\n      i++;\n    }\n    while (j <= high) {\n      graphics.push(new Tuple(j, j, \"add\"));\n      graphics.push(new Tuple(j, j, \"remove\"));\n      temp[r] = arr[j];\n      r++;\n      j++;\n    }\n    i = low;\n    for (let k = 0; k < temp.length; ) {\n      graphics.push(new Tuple(i, temp[k], \"swap\"));\n      arr[i] = temp[k];\n      i++;\n      k++;\n    }\n  }\n\n  async quickSortUtil() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let arr = this.state.arr.slice();\n    let low = 0;\n    let high = arr.length - 1;\n    let graphics = [];\n    let gValue, gWidth;\n    let sorted = this.state.arr.slice().sort(function (a, b) {\n      return a - b;\n    });\n    this.quickSort(arr, low, high, graphics, sorted);\n    let bars = document.getElementsByClassName(\"array-bar\");\n    for (let i = 0; i < graphics.length; i++) {\n      if (graphics[i].operation === \"add\") {\n        bars[graphics[i].first].style.backgroundColor = this.state.pointerColor;\n        bars[graphics[i].second].style.backgroundColor =\n          this.state.pointerColor;\n        if (this.state.randomize === true) return;\n        await this.sleep(this.getSpeed(this.state.speed) / 2);\n        if (this.state.randomize === true) return;\n      }\n      if (graphics[i].operation === \"fix\") {\n        bars[graphics[i].first].style.backgroundColor = this.state.sortedColor;\n        bars[graphics[i].second].style.backgroundColor = this.state.sortedColor;\n      }\n      if (graphics[i].operation === \"remove\") {\n        bars[graphics[i].first].style.backgroundColor = this.state.barColor;\n        bars[graphics[i].first].style.backgroundColor = this.state.barColor;\n      }\n      if (graphics[i].operation === \"swap\") {\n        if (this.state.randomize === true) return;\n        await this.sleep(this.getSpeed(this.state.speed) / 2);\n        if (this.state.randomize === true) return;\n        gValue = bars[graphics[i].first].innerHTML;\n        gWidth = bars[graphics[i].first].style.width;\n        bars[graphics[i].first].innerHTML = bars[graphics[i].second].innerHTML;\n        bars[graphics[i].first].style.width =\n          bars[graphics[i].second].style.width;\n        bars[graphics[i].second].innerHTML = gValue;\n        bars[graphics[i].second].style.width = gWidth;\n        if (this.state.randomize === true) return;\n        await this.sleep(this.getSpeed(this.state.speed) / 2);\n        if (this.state.randomize === true) return;\n      }\n    }\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  quickSort(arr, low, high, graphics, sorted) {\n    if (low < high) {\n      let pi = this.partition(arr, low, high, graphics, sorted);\n      this.quickSort(arr, low, pi - 1, graphics, sorted);\n      this.quickSort(arr, pi + 1, high, graphics, sorted);\n    }\n  }\n\n  partition(arr, low, high, graphics, sorted) {\n    let g;\n    let pivot = arr[high];\n    let i = low - 1;\n    graphics.push(new Tuple(high, high, \"add\"));\n    for (let j = low; j <= high - 1; j++) {\n      graphics.push(new Tuple(j, j, \"add\"));\n      if (arr[j] < pivot) {\n        i++;\n        g = arr[i];\n        arr[i] = arr[j];\n        arr[j] = g;\n        graphics.push(new Tuple(i, j, \"add\"));\n        graphics.push(new Tuple(i, j, \"remove\"));\n        graphics.push(new Tuple(i, j, \"swap\"));\n      }\n      graphics.push(new Tuple(j, j, \"remove\"));\n    }\n    g = arr[i + 1];\n    arr[i + 1] = arr[high];\n    arr[high] = g;\n    graphics.push(new Tuple(i + 1, high, \"add\"));\n    graphics.push(new Tuple(i + 1, high, \"remove\"));\n    graphics.push(new Tuple(i + 1, high, \"swap\"));\n    graphics.push(new Tuple(high, high, \"remove\"));\n    for (let k = 0; k < arr.length; k++) {\n      if (arr[k] === sorted[k]) {\n        graphics.push(new Tuple(k, k, \"fix\"));\n      }\n    }\n    graphics.push(new Tuple(i + 1, i + 1, \"fix\"));\n    return i + 1;\n  }\n\n  async selectionSort() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let bars = document.getElementsByClassName(\"array-bar\");\n    let n = bars.length;\n    let m, r, gValue, gWidth;\n    for (let i = 0; i < n - 1; i++) {\n      m = i;\n      for (let j = i + 1; j < n; j++) {\n        r = m;\n        bars[r].style.backgroundColor = this.state.pointerColor;\n        bars[j].style.backgroundColor = this.state.pointerColor;\n        if (parseInt(bars[j].innerHTML) < parseInt(bars[m].innerHTML)) {\n          m = j;\n        }\n        if (this.state.randomize === true) return;\n        await this.sleep(this.getSpeed(this.state.speed));\n        if (this.state.randomize === true) return;\n        bars[r].style.backgroundColor = this.state.barColor;\n        bars[j].style.backgroundColor = this.state.barColor;\n      }\n      bars[i].style.backgroundColor = this.state.sortedColor;\n      gWidth = bars[i].style.width;\n      gValue = parseInt(bars[i].innerHTML);\n      bars[i].innerHTML = parseInt(bars[m].innerHTML);\n      bars[i].style.width = bars[m].style.width;\n      bars[m].innerHTML = gValue;\n      bars[m].style.width = gWidth;\n    }\n    bars[n - 1].style.backgroundColor = this.state.sortedColor;\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  sleep(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  getSpeed(speed) {\n    switch (speed) {\n      case \"Very Fast\":\n        return 25;\n      case \"Normal\":\n        return 250;\n      case \"Slow\":\n        return 500;\n      case \"Very Slow\":\n        return 1000;\n      default:\n        return 100;\n    }\n  }\n\n  getColor(barColor) {\n    switch (barColor) {\n      case \"Black\":\n        return \"#000000\";\n      case \"Green\":\n        return \"#026423d9\";\n      case \"Pink\":\n        return \"#d90d73cc\";\n      case \"Cyan\":\n        return \"#00e9e9\";\n      case \"Grey\":\n        return \"#424444c2\";\n      default:\n        return \"#000030ed\";\n    }\n  }\n\n  getBarHeight() {\n    let height =\n      (this.height - 300 - parseInt(this.state.size) * 5) /\n      parseInt(this.state.size);\n    return height;\n  }\n\n  getfontHeight() {\n    let fontHeight =\n      (this.height - 370 - parseInt(this.state.size) * 5) /\n      parseInt(this.state.size);\n    return fontHeight - 3;\n  }\n\n  getRandomElement() {\n    var max = 0;\n    var min = 50;\n    if (this.width < 768) max = (this.width * 5) / 10;\n    else max = (this.width * 4) / 10;\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }\n\n  render() {\n    console.log(\"Render of sorting\")\n    return (\n      <div id=\"barView\">\n        {this.state.arr.map((value, idx) => (\n          <div\n            className=\"array-bar\"\n            key={idx}\n            style={{\n              width: `${value}px`,\n              backgroundColor: `${this.state.barColor}`,\n              height: `${this.getBarHeight()}px`,\n              fontSize: `${this.getfontHeight()}px`,\n            }}\n          >\n            {value}\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default SortingVisualizer;\n","import React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport VisualizerController from \"./VisualizerController.js\";\nimport SortingVisualizer from \"./SortingVisualizer.js\";\nimport \"./App.css\";\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      default: {\n        sortingAlgorithm: \"Bubble Sort\",\n        size: \"20\",\n        speed: \"Normal\",\n        barColor: \"Blue\",\n        pointerColor: \"Cyan\",\n        sortedColor: \"Green\",\n        sort: false,\n        randomize: true,\n      },\n      sorted: false,\n    };\n  }\n  controllerDataHandler = (e) => {\n    this.setState(\n      {\n        default: {\n          sortingAlgorithm: e[\"sortingAlgorithm\"],\n          size: e[\"size\"],\n          speed: e[\"speed\"],\n          barColor: e[\"barColor\"],\n          pointerColor: e[\"pointerColor\"],\n          sortedColor: e[\"sortedColor\"],\n          sort: e[\"sort\"],\n          randomize: e[\"randomize\"],\n        },\n        sorted: false,\n      },\n      function () {\n        if (e[\"sort\"] === true) {\n          var element = document.getElementById(\"sortingVisualizer\");\n          element.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\n        }\n      }\n    );\n  };\n  visualizerDataHandler = (e) => {\n    this.setState({ sorted: e });\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <Container fluid>\n          <Row>\n            <Col>\n              <h2>Sorting Visualizer</h2>\n              <VisualizerController controllerDataHandler={this.controllerDataHandler} visualizerData={this.state.sorted}>\n                {this.state.sorted}\n              </VisualizerController>\n            </Col>\n          </Row>\n\n          <Row>\n            <Col lg={9} id=\"sortingVisualizer\">\n              <SortingVisualizer visualizerDataHandler={this.visualizerDataHandler} controllerData={this.state.default}></SortingVisualizer>\n            </Col>\n            <Col lg={3}>\n            <div className=\"inf\">\n                Bubble Sort\n                <br></br>\n                Time Complexcity : O(n^2)\n                <br></br>\n                Space Complexcity : O(1)\n            </div>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <br></br>\n              <h6>A Project by Naman Rathod</h6>\n            </Col>\n          </Row>\n          \n          \n        </Container>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}