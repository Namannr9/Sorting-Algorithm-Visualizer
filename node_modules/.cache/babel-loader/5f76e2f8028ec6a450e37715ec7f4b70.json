{"ast":null,"code":"var _jsxFileName = \"C:\\\\codes\\\\project to deploy\\\\src\\\\SortingVisualizer.js\";\nimport React from \"react\";\nimport \"./SortingVisualizer.css\";\n\nclass Tuple {\n  constructor(first, second, operation) {\n    this.first = first;\n    this.second = second;\n    this.operation = operation;\n  }\n\n}\n\nclass SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      arr: [],\n      sortingAlgorithm: \"\",\n      size: \"\",\n      speed: \"\",\n      barColor: \"\",\n      pointerColor: \"\",\n      sort: false,\n      randomize: false\n    };\n    this.sorted = false;\n    this.width = 0;\n    this.height = 0;\n  }\n\n  componentDidMount() {\n    console.log(\"Console did mount\");\n    this.width = window.screen.width;\n    this.height = window.screen.height;\n    let controllerData = this.props.controllerData;\n    let temp = new Set();\n\n    while (temp.size !== parseInt(controllerData[\"size\"])) {\n      temp.add(this.getRandomElement());\n    }\n\n    temp = Array.from(temp);\n    this.setState({\n      arr: temp,\n      sortingAlgorithm: controllerData[\"sortingAlgorithm\"],\n      size: controllerData[\"size\"],\n      speed: controllerData[\"speed\"],\n      barColor: this.getColor(controllerData[\"barColor\"]),\n      pointerColor: this.getColor(controllerData[\"pointerColor\"]),\n      sortedColor: this.getColor(controllerData[\"sortedColor\"]),\n      sort: controllerData[\"sort\"],\n      randomize: controllerData[\"randomize\"]\n    });\n  }\n\n  componentDidUpdate(previousProps, previousState) {\n    //console.log(\"Component did update mount\")\n    if (previousProps.controllerData !== this.props.controllerData) {\n      let controllerData = this.props.controllerData;\n      let cd = {};\n\n      if (controllerData[\"sort\"] === true) {\n        cd = {\n          sortingAlgorithm: controllerData[\"sortingAlgorithm\"],\n          size: controllerData[\"size\"],\n          speed: controllerData[\"speed\"],\n          barColor: this.getColor(controllerData[\"barColor\"]),\n          pointerColor: this.getColor(controllerData[\"pointerColor\"]),\n          sortedColor: this.getColor(controllerData[\"sortedColor\"]),\n          sort: controllerData[\"sort\"],\n          randomize: controllerData[\"randomize\"]\n        };\n\n        switch (controllerData.sortingAlgorithm) {\n          case \"Cocktail Sort\":\n            this.setState(cd, function () {\n              this.cocktailSort();\n            });\n            break;\n\n          case \"Heap Sort\":\n            this.setState(cd, function () {\n              this.heapSort();\n            });\n            break;\n\n          case \"Insertion Sort\":\n            this.setState(cd, function () {\n              this.insertionSort();\n            });\n            break;\n\n          case \"Linear Sort\":\n            this.setState(cd, function () {\n              this.linearSort();\n            });\n            break;\n\n          case \"Merge Sort\":\n            this.setState(cd, function () {\n              this.mergeSortUtil();\n            });\n            break;\n\n          case \"Quick Sort\":\n            this.setState(cd, function () {\n              this.quickSortUtil();\n            });\n            break;\n\n          case \"Selection Sort\":\n            this.setState(cd, function () {\n              this.selectionSort();\n              console.log(\"Selection sort\");\n            });\n            break;\n\n          default:\n            this.setState(cd, function () {\n              this.bubbleSort(); //console.log(\"bubble sort\")\n            });\n            break;\n        }\n      } // if sort=== true ends\n      else {\n        let newState = {};\n        let temp = new Set();\n\n        if (parseInt(this.state[\"size\"]) !== parseInt(controllerData[\"size\"])) {\n          newState[\"sortingAlgorithm\"] = controllerData[\"sortingAlgorithm\"];\n          newState[\"size\"] = parseInt(controllerData[\"size\"]);\n          newState[\"speed\"] = controllerData[\"speed\"];\n          newState[\"barColor\"] = this.getColor(controllerData[\"barColor\"]);\n          newState[\"pointerColor\"] = this.getColor(controllerData[\"pointerColor\"]);\n          newState[\"sortedColor\"] = this.getColor(controllerData[\"sortedColor\"]);\n          newState[\"randomize\"] = controllerData[\"randomize\"];\n          newState[\"sort\"] = controllerData[\"sort\"];\n\n          while (temp.size !== newState[\"size\"]) {\n            temp.add(this.getRandomElement());\n          }\n\n          temp = Array.from(temp);\n          newState[\"arr\"] = temp;\n        } else {\n          if (controllerData[\"randomize\"] === true) {\n            newState[\"sortingAlgorithm\"] = controllerData[\"sortingAlgorithm\"];\n            newState[\"size\"] = parseInt(controllerData[\"size\"]);\n            newState[\"speed\"] = controllerData[\"speed\"];\n            newState[\"barColor\"] = this.getColor(controllerData[\"barColor\"]);\n            newState[\"pointerColor\"] = this.getColor(controllerData[\"pointerColor\"]);\n            newState[\"sortedColor\"] = this.getColor(controllerData[\"sortedColor\"]);\n            newState[\"randomize\"] = controllerData[\"randomize\"];\n            newState[\"sort\"] = controllerData[\"sort\"];\n\n            while (temp.size !== newState[\"size\"]) {\n              temp.add(this.getRandomElement());\n            }\n\n            temp = Array.from(temp);\n            newState[\"arr\"] = temp;\n            let bars = document.getElementsByClassName(\"array-bar\");\n\n            for (let e = 0; e < bars.length; e++) bars[e].style.backgroundColor = newState[\"barColor\"];\n          } else {\n            newState[\"sortingAlgorithm\"] = controllerData[\"sortingAlgorithm\"];\n            newState[\"size\"] = parseInt(controllerData[\"size\"]);\n            newState[\"barColor\"] = this.getColor(controllerData[\"barColor\"]);\n            newState[\"pointerColor\"] = this.getColor(controllerData[\"pointerColor\"]);\n            newState[\"sortedColor\"] = this.getColor(controllerData[\"sortedColor\"]);\n            newState[\"speed\"] = controllerData[\"speed\"];\n            newState[\"arr\"] = this.state.arr;\n          }\n        }\n\n        this.setState(newState);\n      } // else sort==false\n\n    }\n  } //component did update ends\n  //--------------------------SORTING ALGORITHMS STARTS FROM HERE--------------------------------\n\n\n  async bubbleSort() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let bars = document.getElementsByClassName(\"array-bar\");\n    let n = bars.length;\n    let e, f, eIndex, fIndex;\n\n    for (let i = 0; i < n - 1; i++) {\n      for (let j = 0; j < n - i - 1; j++) {\n        bars[j].style.backgroundColor = this.state.pointerColor;\n        bars[j + 1].style.backgroundColor = this.state.pointerColor;\n        e = parseInt(bars[j].innerHTML);\n        eIndex = j;\n        f = parseInt(bars[j + 1].innerHTML);\n        fIndex = j + 1;\n\n        if (e > f) {\n          let gValue = bars[eIndex].innerHTML;\n          let gWidth = bars[eIndex].style.width;\n          bars[eIndex].innerHTML = bars[fIndex].innerHTML;\n          bars[eIndex].style.width = bars[fIndex].style.width;\n          bars[fIndex].innerHTML = gValue;\n          bars[fIndex].style.width = gWidth;\n          if (this.state.randomize === true) return;\n          await this.sleep(this.getSpeed(this.state.speed));\n          if (this.state.randomize === true) return;\n        }\n\n        bars[j].style.backgroundColor = this.state.barColor;\n        bars[j + 1].style.backgroundColor = this.state.barColor;\n      }\n\n      bars[n - i - 1].style.backgroundColor = this.state.sortedColor;\n    }\n\n    bars[0].style.backgroundColor = this.state.sortedColor;\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  async cocktailSort() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let bars = document.getElementsByClassName(\"array-bar\");\n    let n = bars.length;\n    let swapped = true;\n    let start = 0;\n    let end = n - 1;\n    let gValue, gWidth;\n\n    while (swapped) {\n      swapped = false;\n\n      for (let i = start; i < end; ++i) {\n        if (parseInt(bars[i].innerHTML) > parseInt(bars[i + 1].innerHTML)) {\n          bars[i].style.backgroundColor = this.state.pointerColor;\n          bars[i + 1].style.backgroundColor = this.state.pointerColor;\n          if (this.state.randomize === true) return;\n          await this.sleep(this.getSpeed(this.state.speed));\n          if (this.state.randomize === true) return;\n          bars[i].style.backgroundColor = this.state.barColor;\n          bars[i + 1].style.backgroundColor = this.state.barColor;\n          gValue = parseInt(bars[i].innerHTML);\n          gWidth = bars[i].style.width;\n          bars[i].innerHTML = parseInt(bars[i + 1].innerHTML);\n          bars[i].style.width = bars[i + 1].style.width;\n          bars[i + 1].innerHTML = gValue;\n          bars[i + 1].style.width = gWidth;\n          swapped = true;\n        }\n      }\n\n      if (!swapped) break;\n      swapped = false;\n      bars[end].style.backgroundColor = this.state.sortedColor;\n      --end;\n\n      for (let i = end - 1; i >= start; --i) {\n        if (parseInt(bars[i].innerHTML) > parseInt(bars[i + 1].innerHTML)) {\n          bars[i].style.backgroundColor = this.state.pointerColor;\n          bars[i + 1].style.backgroundColor = this.state.pointerColor;\n          if (this.state.randomize === true) return;\n          await this.sleep(this.getSpeed(this.state.speed));\n          if (this.state.randomize === true) return;\n          bars[i].style.backgroundColor = this.state.barColor;\n          bars[i + 1].style.backgroundColor = this.state.barColor;\n          gValue = parseInt(bars[i].innerHTML);\n          gWidth = bars[i].style.width;\n          bars[i].innerHTML = parseInt(bars[i + 1].innerHTML);\n          bars[i].style.width = bars[i + 1].style.width;\n          bars[i + 1].innerHTML = gValue;\n          bars[i + 1].style.width = gWidth;\n          swapped = true;\n        }\n      }\n\n      bars[start].style.backgroundColor = this.state.sortedColor;\n      ++start;\n    }\n\n    let i = start;\n    let j = end;\n\n    while (i <= j) {\n      bars[j].style.backgroundColor = this.state.sortedColor;\n      bars[i].style.backgroundColor = this.state.sortedColor;\n      i++;\n      j--;\n    }\n\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  async heapSort() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let arr = document.getElementsByClassName(\"array-bar\");\n    let temp, tempWidth;\n    let leftIndex, rightIndex, x, y;\n    let end; //building heap\n\n    for (let e = 1; e < arr.length; e++) {\n      let i = e;\n\n      while (i > 0) {\n        if (parseInt(arr[i].innerHTML) > parseInt(arr[Math.floor((i - 1) / 2)].innerHTML)) {\n          x = i;\n          y = Math.floor((i - 1) / 2);\n          temp = arr[x].innerHTML;\n          tempWidth = arr[x].style.width;\n          arr[x].style.backgroundColor = this.state.pointerColor;\n          arr[y].style.backgroundColor = this.state.pointerColor;\n          arr[x].innerHTML = arr[y].innerHTML;\n          arr[x].style.width = arr[y].style.width;\n          arr[y].innerHTML = temp;\n          arr[y].style.width = tempWidth;\n          await this.sleep(this.getSpeed(this.state.speed));\n          arr[x].style.backgroundColor = this.state.barColor;\n          arr[y].style.backgroundColor = this.state.barColor;\n          i = y;\n        } else {\n          break;\n        }\n      }\n\n      if (this.state.randomize === true) return;\n      await this.sleep(this.getSpeed(this.state.speed));\n      if (this.state.randomize === true) return;\n    } //heapify\n\n\n    for (let e = arr.length - 1; e > 0; e--) {\n      arr[0].style.backgroundColor = this.state.pointerColor;\n      arr[e].style.backgroundColor = this.state.pointerColor;\n      temp = arr[0].innerHTML;\n      tempWidth = arr[0].style.width;\n      arr[0].innerHTML = arr[e].innerHTML;\n      arr[0].style.width = arr[e].style.width;\n      arr[e].innerHTML = temp;\n      arr[e].style.width = tempWidth;\n      await this.sleep(this.getSpeed(this.state.speed));\n      arr[0].style.backgroundColor = this.state.barColor;\n      arr[e].style.backgroundColor = this.state.barColor;\n      end = e - 1;\n      let i = 0;\n\n      while (i <= end) {\n        leftIndex = 2 * i + 1;\n        if (leftIndex > end) break;\n        rightIndex = 2 * i + 2;\n        if (rightIndex > end) rightIndex = leftIndex;\n        if (parseInt(arr[i].innerHTML) >= Math.max(parseInt(arr[leftIndex].innerHTML), parseInt(arr[rightIndex].innerHTML))) break;\n\n        if (parseInt(arr[leftIndex].innerHTML) >= parseInt(arr[rightIndex].innerHTML)) {\n          x = i;\n          y = leftIndex;\n          arr[x].style.backgroundColor = this.state.pointerColor;\n          arr[y].style.backgroundColor = this.state.pointerColor;\n          temp = arr[x].innerHTML;\n          tempWidth = arr[x].style.width;\n          arr[x].innerHTML = arr[y].innerHTML;\n          arr[x].style.width = arr[y].style.width;\n          arr[y].innerHTML = temp;\n          arr[y].style.width = tempWidth;\n          await this.sleep(this.getSpeed(this.state.speed));\n          arr[x].style.backgroundColor = this.state.barColor;\n          arr[y].style.backgroundColor = this.state.barColor;\n          i = leftIndex;\n        } else {\n          x = i;\n          y = rightIndex;\n          arr[x].style.backgroundColor = this.state.pointerColor;\n          arr[y].style.backgroundColor = this.state.pointerColor;\n          temp = arr[x].innerHTML;\n          tempWidth = arr[x].style.width;\n          arr[x].innerHTML = arr[y].innerHTML;\n          arr[x].style.width = arr[y].style.width;\n          arr[y].innerHTML = temp;\n          arr[y].style.width = tempWidth;\n          if (this.state.randomize === true) return;\n          await this.sleep(this.getSpeed(this.state.speed));\n          if (this.state.randomize === true) return;\n          arr[x].style.backgroundColor = this.state.barColor;\n          arr[y].style.backgroundColor = this.state.barColor;\n          i = rightIndex;\n        }\n      }\n\n      if (this.state.randomize === true) return;\n      await this.sleep(this.getSpeed(this.state.speed));\n      if (this.state.randomize === true) return;\n      arr[e].style.backgroundColor = this.state.sortedColor;\n    }\n\n    arr[0].style.backgroundColor = this.state.sortedColor;\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  async insertionSort() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let bars = document.getElementsByClassName(\"array-bar\");\n    let n = bars.length;\n    let p, g, gValue, gWidth, jValue, jWidth;\n\n    for (let i = 1; i <= n - 1; i++) {\n      p = i;\n      bars[i].style.backgroundColor = this.state.pointerColor;\n      gValue = parseInt(bars[p].innerHTML);\n      gWidth = bars[p].style.width;\n\n      for (let j = p - 1; j >= 0; j--, p--) {\n        jValue = parseInt(bars[j].innerHTML);\n        jWidth = bars[j].style.width;\n        g = j;\n        bars[g].style.backgroundColor = this.state.pointerColor;\n\n        if (gValue >= jValue) {\n          if (this.state.randomize === true) return;\n          await this.sleep(this.getSpeed(this.state.speed));\n          if (this.state.randomize === true) return;\n          bars[g].style.backgroundColor = this.state.sortedColor;\n          break;\n        }\n\n        bars[j + 1].innerHTML = jValue;\n        bars[j + 1].style.width = jWidth;\n        if (this.state.randomize === true) return;\n        await this.sleep(this.getSpeed(this.state.speed));\n        if (this.state.randomize === true) return;\n        bars[g].style.backgroundColor = this.state.sortedColor;\n      }\n\n      bars[i].style.backgroundColor = this.state.sortedColor;\n      bars[p].innerHTML = gValue;\n      bars[p].style.width = gWidth;\n    }\n\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  async linearSort() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let bars = document.getElementsByClassName(\"array-bar\");\n    let n = bars.length;\n    let i, j, gValue, gWidth;\n    i = 0;\n\n    while (i <= n - 2) {\n      j = i + 1;\n\n      while (j <= n - 1) {\n        bars[i].style.backgroundColor = this.state.pointerColor;\n        bars[j].style.backgroundColor = this.state.pointerColor;\n\n        if (parseInt(bars[j].innerHTML) < parseInt(bars[i].innerHTML)) {\n          bars[i].style.backgroundColor = this.state.pointerColor;\n          bars[j].style.backgroundColor = this.state.pointerColor;\n          if (this.state.randomize === true) return;\n          await this.sleep(this.getSpeed(this.state.speed));\n          if (this.state.randomize === true) return;\n          bars[i].style.backgroundColor = this.state.barColor;\n          bars[j].style.backgroundColor = this.state.barColor;\n          gValue = parseInt(bars[i].innerHTML);\n          gWidth = bars[i].style.width;\n          bars[i].innerHTML = parseInt(bars[j].innerHTML);\n          bars[i].style.width = bars[j].style.width;\n          bars[j].innerHTML = gValue;\n          bars[j].style.width = gWidth;\n        }\n\n        if (this.state.randomize === true) return;\n        await this.sleep(this.getSpeed(this.state.speed));\n        if (this.state.randomize === true) return;\n        bars[j].style.backgroundColor = this.state.barColor;\n        bars[i].style.backgroundColor = this.state.barColor;\n        j++;\n      }\n\n      bars[i].style.backgroundColor = this.state.sortedColor;\n      i++;\n    }\n\n    bars[n - 1].style.backgroundColor = this.state.sortedColor;\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  async mergeSortUtil() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let graphics = [];\n    let arr = this.state.arr.slice();\n    let low = 0;\n    let high = arr.length - 1;\n    this.mergeSort(arr, low, high, graphics);\n    let bars = document.getElementsByClassName(\"array-bar\");\n\n    for (let i = 0; i < graphics.length; i++) {\n      if (graphics[i].operation === \"add\") {\n        bars[graphics[i].first].style.backgroundColor = this.state.pointerColor;\n        bars[graphics[i].second].style.backgroundColor = this.state.pointerColor;\n      }\n\n      if (graphics[i].operation === \"remove\") {\n        bars[graphics[i].first].style.backgroundColor = this.state.barColor;\n        bars[graphics[i].second].style.backgroundColor = this.state.barColor;\n      }\n\n      if (graphics[i].operation === \"swap\") {\n        bars[graphics[i].first].innerHTML = graphics[i].second;\n        bars[graphics[i].first].style.width = graphics[i].second + \"px\";\n        bars[graphics[i].first].style.backgroundColor = this.state.sortedColor;\n      }\n\n      if (this.state.randomize === true) return;\n      await this.sleep(this.getSpeed(this.state.speed));\n      if (this.state.randomize === true) return;\n    }\n\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  mergeSort(arr, low, high, graphics) {\n    if (low >= high) return;\n    var middle = Math.floor((low + high) / 2);\n    this.mergeSort(arr, low, middle, graphics);\n    this.mergeSort(arr, middle + 1, high, graphics);\n    this.merge(arr, low, high, graphics);\n  }\n\n  merge(arr, low, high, graphics) {\n    let middle = Math.floor((low + high) / 2);\n    let temp = new Array(high - low + 1);\n    let i = low;\n    let j = middle + 1;\n    let r = 0;\n\n    while (i <= middle && j <= high) {\n      graphics.push(new Tuple(i, j, \"add\"));\n      graphics.push(new Tuple(i, j, \"remove\"));\n\n      if (arr[i] <= arr[j]) {\n        temp[r] = arr[i];\n        r++;\n        i++;\n      } else {\n        temp[r] = arr[j];\n        r++;\n        j++;\n      }\n    }\n\n    while (i <= middle) {\n      graphics.push(new Tuple(i, i, \"add\"));\n      graphics.push(new Tuple(i, i, \"remove\"));\n      temp[r] = arr[i];\n      r++;\n      i++;\n    }\n\n    while (j <= high) {\n      graphics.push(new Tuple(j, j, \"add\"));\n      graphics.push(new Tuple(j, j, \"remove\"));\n      temp[r] = arr[j];\n      r++;\n      j++;\n    }\n\n    i = low;\n\n    for (let k = 0; k < temp.length;) {\n      graphics.push(new Tuple(i, temp[k], \"swap\"));\n      arr[i] = temp[k];\n      i++;\n      k++;\n    }\n  }\n\n  async quickSortUtil() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let arr = this.state.arr.slice();\n    let low = 0;\n    let high = arr.length - 1;\n    let graphics = [];\n    let gValue, gWidth;\n    let sorted = this.state.arr.slice().sort(function (a, b) {\n      return a - b;\n    });\n    this.quickSort(arr, low, high, graphics, sorted);\n    let bars = document.getElementsByClassName(\"array-bar\");\n\n    for (let i = 0; i < graphics.length; i++) {\n      if (graphics[i].operation === \"add\") {\n        bars[graphics[i].first].style.backgroundColor = this.state.pointerColor;\n        bars[graphics[i].second].style.backgroundColor = this.state.pointerColor;\n        if (this.state.randomize === true) return;\n        await this.sleep(this.getSpeed(this.state.speed) / 2);\n        if (this.state.randomize === true) return;\n      }\n\n      if (graphics[i].operation === \"fix\") {\n        bars[graphics[i].first].style.backgroundColor = this.state.sortedColor;\n        bars[graphics[i].second].style.backgroundColor = this.state.sortedColor;\n      }\n\n      if (graphics[i].operation === \"remove\") {\n        bars[graphics[i].first].style.backgroundColor = this.state.barColor;\n        bars[graphics[i].first].style.backgroundColor = this.state.barColor;\n      }\n\n      if (graphics[i].operation === \"swap\") {\n        if (this.state.randomize === true) return;\n        await this.sleep(this.getSpeed(this.state.speed) / 2);\n        if (this.state.randomize === true) return;\n        gValue = bars[graphics[i].first].innerHTML;\n        gWidth = bars[graphics[i].first].style.width;\n        bars[graphics[i].first].innerHTML = bars[graphics[i].second].innerHTML;\n        bars[graphics[i].first].style.width = bars[graphics[i].second].style.width;\n        bars[graphics[i].second].innerHTML = gValue;\n        bars[graphics[i].second].style.width = gWidth;\n        if (this.state.randomize === true) return;\n        await this.sleep(this.getSpeed(this.state.speed) / 2);\n        if (this.state.randomize === true) return;\n      }\n    }\n\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  quickSort(arr, low, high, graphics, sorted) {\n    if (low < high) {\n      let pi = this.partition(arr, low, high, graphics, sorted);\n      this.quickSort(arr, low, pi - 1, graphics, sorted);\n      this.quickSort(arr, pi + 1, high, graphics, sorted);\n    }\n  }\n\n  partition(arr, low, high, graphics, sorted) {\n    let g;\n    let pivot = arr[high];\n    let i = low - 1;\n    graphics.push(new Tuple(high, high, \"add\"));\n\n    for (let j = low; j <= high - 1; j++) {\n      graphics.push(new Tuple(j, j, \"add\"));\n\n      if (arr[j] < pivot) {\n        i++;\n        g = arr[i];\n        arr[i] = arr[j];\n        arr[j] = g;\n        graphics.push(new Tuple(i, j, \"add\"));\n        graphics.push(new Tuple(i, j, \"remove\"));\n        graphics.push(new Tuple(i, j, \"swap\"));\n      }\n\n      graphics.push(new Tuple(j, j, \"remove\"));\n    }\n\n    g = arr[i + 1];\n    arr[i + 1] = arr[high];\n    arr[high] = g;\n    graphics.push(new Tuple(i + 1, high, \"add\"));\n    graphics.push(new Tuple(i + 1, high, \"remove\"));\n    graphics.push(new Tuple(i + 1, high, \"swap\"));\n    graphics.push(new Tuple(high, high, \"remove\"));\n\n    for (let k = 0; k < arr.length; k++) {\n      if (arr[k] === sorted[k]) {\n        graphics.push(new Tuple(k, k, \"fix\"));\n      }\n    }\n\n    graphics.push(new Tuple(i + 1, i + 1, \"fix\"));\n    return i + 1;\n  }\n\n  async selectionSort() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let bars = document.getElementsByClassName(\"array-bar\");\n    let n = bars.length;\n    let m, r, gValue, gWidth;\n\n    for (let i = 0; i < n - 1; i++) {\n      m = i;\n\n      for (let j = i + 1; j < n; j++) {\n        r = m;\n        bars[r].style.backgroundColor = this.state.pointerColor;\n        bars[j].style.backgroundColor = this.state.pointerColor;\n\n        if (parseInt(bars[j].innerHTML) < parseInt(bars[m].innerHTML)) {\n          m = j;\n        }\n\n        if (this.state.randomize === true) return;\n        await this.sleep(this.getSpeed(this.state.speed));\n        if (this.state.randomize === true) return;\n        bars[r].style.backgroundColor = this.state.barColor;\n        bars[j].style.backgroundColor = this.state.barColor;\n      }\n\n      bars[i].style.backgroundColor = this.state.sortedColor;\n      gWidth = bars[i].style.width;\n      gValue = parseInt(bars[i].innerHTML);\n      bars[i].innerHTML = parseInt(bars[m].innerHTML);\n      bars[i].style.width = bars[m].style.width;\n      bars[m].innerHTML = gValue;\n      bars[m].style.width = gWidth;\n    }\n\n    bars[n - 1].style.backgroundColor = this.state.sortedColor;\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  getSpeed(speed) {\n    switch (speed) {\n      case \"Very Fast\":\n        return 25;\n\n      case \"Normal\":\n        return 250;\n\n      case \"Slow\":\n        return 500;\n\n      case \"Very Slow\":\n        return 1000;\n\n      default:\n        return 100;\n    }\n  }\n\n  getColor(barColor) {\n    switch (barColor) {\n      case \"Black\":\n        return \"#000000\";\n\n      case \"Green\":\n        return \"#026423d9\";\n\n      case \"Pink\":\n        return \"#d90d73cc\";\n\n      case \"Cyan\":\n        return \"#00e9e9\";\n\n      case \"Grey\":\n        return \"#424444c2\";\n\n      default:\n        return \"#000030ed\";\n    }\n  }\n\n  getBarHeight() {\n    let height = (this.height - 300 - parseInt(this.state.size) * 5) / parseInt(this.state.size);\n    return height;\n  }\n\n  getfontHeight() {\n    let fontHeight = (this.height - 370 - parseInt(this.state.size) * 5) / parseInt(this.state.size);\n    return fontHeight - 3;\n  }\n\n  getRandomElement() {\n    var max = 0;\n    var min = 50;\n    if (this.width < 768) max = this.width * 5 / 10;else max = this.width * 4 / 10;\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }\n\n  render() {\n    console.log(\"Render of sorting\");\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"barView\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 753,\n        columnNumber: 7\n      }\n    }, this.state.arr.map((value, idx) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-bar\",\n      key: idx,\n      style: {\n        width: `${value}px`,\n        backgroundColor: `${this.state.barColor}`,\n        height: `${this.getBarHeight()}px`,\n        fontSize: `${this.getfontHeight()}px`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 755,\n        columnNumber: 11\n      }\n    }, value)));\n  }\n\n}\n\nexport default SortingVisualizer;","map":{"version":3,"names":["React","Tuple","constructor","first","second","operation","SortingVisualizer","Component","props","state","arr","sortingAlgorithm","size","speed","barColor","pointerColor","sort","randomize","sorted","width","height","componentDidMount","console","log","window","screen","controllerData","temp","Set","parseInt","add","getRandomElement","Array","from","setState","getColor","sortedColor","componentDidUpdate","previousProps","previousState","cd","cocktailSort","heapSort","insertionSort","linearSort","mergeSortUtil","quickSortUtil","selectionSort","bubbleSort","newState","bars","document","getElementsByClassName","e","length","style","backgroundColor","visualizerDataHandler","n","f","eIndex","fIndex","i","j","innerHTML","gValue","gWidth","sleep","getSpeed","swapped","start","end","tempWidth","leftIndex","rightIndex","x","y","Math","floor","max","p","g","jValue","jWidth","graphics","slice","low","high","mergeSort","middle","merge","r","push","k","a","b","quickSort","pi","partition","pivot","m","ms","Promise","resolve","setTimeout","getBarHeight","getfontHeight","fontHeight","min","random","render","map","value","idx","fontSize"],"sources":["C:/codes/project to deploy/src/SortingVisualizer.js"],"sourcesContent":["import React from \"react\";\nimport \"./SortingVisualizer.css\";\n\nclass Tuple {\n  constructor(first, second, operation) {\n    this.first = first;\n    this.second = second;\n    this.operation = operation;\n  }\n}\n\nclass SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      arr: [],\n      sortingAlgorithm: \"\",\n      size: \"\",\n      speed: \"\",\n      barColor: \"\",\n      pointerColor: \"\",\n      sort: false,\n      randomize: false,\n    };\n    this.sorted = false;\n    this.width = 0;\n    this.height = 0;\n  }\n\n  componentDidMount() {\n    console.log(\"Console did mount\")\n    this.width = window.screen.width;\n    this.height = window.screen.height;\n    \n    \n    let controllerData = this.props.controllerData;\n    let temp = new Set();\n    while (temp.size !== parseInt(controllerData[\"size\"])) {\n      temp.add(this.getRandomElement());\n    }\n    temp = Array.from(temp);\n    this.setState({\n      arr: temp,\n      sortingAlgorithm: controllerData[\"sortingAlgorithm\"],\n      size: controllerData[\"size\"],\n      speed: controllerData[\"speed\"],\n      barColor: this.getColor(controllerData[\"barColor\"]),\n      pointerColor: this.getColor(controllerData[\"pointerColor\"]),\n      sortedColor: this.getColor(controllerData[\"sortedColor\"]),\n      sort: controllerData[\"sort\"],\n      randomize: controllerData[\"randomize\"],\n    });\n  }\n\n  componentDidUpdate(previousProps, previousState) {\n    //console.log(\"Component did update mount\")\n    if (previousProps.controllerData !== this.props.controllerData) {\n      let controllerData = this.props.controllerData;\n      let cd = {};\n      if (controllerData[\"sort\"] === true) {\n        cd = {\n          sortingAlgorithm: controllerData[\"sortingAlgorithm\"],\n          size: controllerData[\"size\"],\n          speed: controllerData[\"speed\"],\n          barColor: this.getColor(controllerData[\"barColor\"]),\n          pointerColor: this.getColor(controllerData[\"pointerColor\"]),\n          sortedColor: this.getColor(controllerData[\"sortedColor\"]),\n          sort: controllerData[\"sort\"],\n          randomize: controllerData[\"randomize\"],\n        };\n        switch (controllerData.sortingAlgorithm) {\n          case \"Cocktail Sort\":\n            this.setState(cd, function () {\n              this.cocktailSort();\n            });\n            break;\n\n          case \"Heap Sort\":\n            this.setState(cd, function () {\n              this.heapSort();\n            });\n            break;\n\n          case \"Insertion Sort\":\n            this.setState(cd, function () {\n              this.insertionSort();\n            });\n            break;\n\n          case \"Linear Sort\":\n            this.setState(cd, function () {\n              this.linearSort();\n            });\n            break;\n\n          case \"Merge Sort\":\n            this.setState(cd, function () {\n              this.mergeSortUtil();\n            });\n            break;\n\n          case \"Quick Sort\":\n            this.setState(cd, function () {\n              this.quickSortUtil();\n            });\n            break;\n\n          case \"Selection Sort\":\n            this.setState(cd, function () {\n              this.selectionSort();\n              console.log(\"Selection sort\")\n            });\n            break;\n\n          default:\n            this.setState(cd, function () {\n              this.bubbleSort();\n              //console.log(\"bubble sort\")\n            });\n            break;\n        }\n      } // if sort=== true ends\n      else {\n        let newState = {};\n        let temp = new Set();\n        if (parseInt(this.state[\"size\"]) !== parseInt(controllerData[\"size\"])) {\n          newState[\"sortingAlgorithm\"] = controllerData[\"sortingAlgorithm\"];\n          newState[\"size\"] = parseInt(controllerData[\"size\"]);\n          newState[\"speed\"] = controllerData[\"speed\"];\n          newState[\"barColor\"] = this.getColor(controllerData[\"barColor\"]);\n          newState[\"pointerColor\"] = this.getColor(\n            controllerData[\"pointerColor\"]\n          );\n          newState[\"sortedColor\"] = this.getColor(\n            controllerData[\"sortedColor\"]\n          );\n          newState[\"randomize\"] = controllerData[\"randomize\"];\n          newState[\"sort\"] = controllerData[\"sort\"];\n          while (temp.size !== newState[\"size\"]) {\n            temp.add(this.getRandomElement());\n          }\n          temp = Array.from(temp);\n          newState[\"arr\"] = temp;\n        } else {\n          if (controllerData[\"randomize\"] === true) {\n            newState[\"sortingAlgorithm\"] = controllerData[\"sortingAlgorithm\"];\n            newState[\"size\"] = parseInt(controllerData[\"size\"]);\n            newState[\"speed\"] = controllerData[\"speed\"];\n            newState[\"barColor\"] = this.getColor(controllerData[\"barColor\"]);\n            newState[\"pointerColor\"] = this.getColor(\n              controllerData[\"pointerColor\"]\n            );\n            newState[\"sortedColor\"] = this.getColor(\n              controllerData[\"sortedColor\"]\n            );\n            newState[\"randomize\"] = controllerData[\"randomize\"];\n            newState[\"sort\"] = controllerData[\"sort\"];\n            while (temp.size !== newState[\"size\"]) {\n              temp.add(this.getRandomElement());\n            }\n            temp = Array.from(temp);\n            newState[\"arr\"] = temp;\n            let bars = document.getElementsByClassName(\"array-bar\");\n            for (let e = 0; e < bars.length; e++)\n              bars[e].style.backgroundColor = newState[\"barColor\"];\n          } else {\n            newState[\"sortingAlgorithm\"] = controllerData[\"sortingAlgorithm\"];\n            newState[\"size\"] = parseInt(controllerData[\"size\"]);\n            newState[\"barColor\"] = this.getColor(controllerData[\"barColor\"]);\n            newState[\"pointerColor\"] = this.getColor(\n              controllerData[\"pointerColor\"]\n            );\n            newState[\"sortedColor\"] = this.getColor(\n              controllerData[\"sortedColor\"]\n            );\n            newState[\"speed\"] = controllerData[\"speed\"];\n            newState[\"arr\"] = this.state.arr;\n          }\n        }\n        this.setState(newState);\n      }// else sort==false\n    }\n  } //component did update ends\n\n\n  //--------------------------SORTING ALGORITHMS STARTS FROM HERE--------------------------------\n  async bubbleSort() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let bars = document.getElementsByClassName(\"array-bar\");\n    let n = bars.length;\n    let e, f, eIndex, fIndex;\n    for (let i = 0; i < n - 1; i++) {\n      for (let j = 0; j < n - i - 1; j++) {\n        bars[j].style.backgroundColor = this.state.pointerColor;\n        \n        bars[j + 1].style.backgroundColor = this.state.pointerColor;\n        \n        e = parseInt(bars[j].innerHTML);\n        eIndex = j;\n        f = parseInt(bars[j + 1].innerHTML);\n        fIndex = j + 1;\n        if (e > f) {\n          let gValue = bars[eIndex].innerHTML;\n          let gWidth = bars[eIndex].style.width;\n          bars[eIndex].innerHTML = bars[fIndex].innerHTML;\n          bars[eIndex].style.width = bars[fIndex].style.width;\n          bars[fIndex].innerHTML = gValue;\n          bars[fIndex].style.width = gWidth;\n          if (this.state.randomize === true) return;\n          await this.sleep(this.getSpeed(this.state.speed));\n          if (this.state.randomize === true) return;\n        }\n        bars[j].style.backgroundColor = this.state.barColor;\n        \n        bars[j + 1].style.backgroundColor = this.state.barColor;\n        \n      }\n      bars[n - i - 1].style.backgroundColor = this.state.sortedColor;\n    }\n    bars[0].style.backgroundColor = this.state.sortedColor;\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  async cocktailSort() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let bars = document.getElementsByClassName(\"array-bar\");\n    let n = bars.length;\n    let swapped = true;\n    let start = 0;\n    let end = n - 1;\n    let gValue, gWidth;\n    while (swapped) {\n      swapped = false;\n      for (let i = start; i < end; ++i) {\n        if (parseInt(bars[i].innerHTML) > parseInt(bars[i + 1].innerHTML)) {\n          bars[i].style.backgroundColor = this.state.pointerColor;\n          bars[i + 1].style.backgroundColor = this.state.pointerColor;\n          if (this.state.randomize === true) return;\n          await this.sleep(this.getSpeed(this.state.speed));\n          if (this.state.randomize === true) return;\n          bars[i].style.backgroundColor = this.state.barColor;\n          bars[i + 1].style.backgroundColor = this.state.barColor;\n          gValue = parseInt(bars[i].innerHTML);\n          gWidth = bars[i].style.width;\n          bars[i].innerHTML = parseInt(bars[i + 1].innerHTML);\n          bars[i].style.width = bars[i + 1].style.width;\n          bars[i + 1].innerHTML = gValue;\n          bars[i + 1].style.width = gWidth;\n          swapped = true;\n        }\n      }\n      if (!swapped) break;\n      swapped = false;\n      bars[end].style.backgroundColor = this.state.sortedColor;\n      --end;\n      for (let i = end - 1; i >= start; --i) {\n        if (parseInt(bars[i].innerHTML) > parseInt(bars[i + 1].innerHTML)) {\n          bars[i].style.backgroundColor = this.state.pointerColor;\n          bars[i + 1].style.backgroundColor = this.state.pointerColor;\n          if (this.state.randomize === true) return;\n          await this.sleep(this.getSpeed(this.state.speed));\n          if (this.state.randomize === true) return;\n          bars[i].style.backgroundColor = this.state.barColor;\n          bars[i + 1].style.backgroundColor = this.state.barColor;\n          gValue = parseInt(bars[i].innerHTML);\n          gWidth = bars[i].style.width;\n          bars[i].innerHTML = parseInt(bars[i + 1].innerHTML);\n          bars[i].style.width = bars[i + 1].style.width;\n          bars[i + 1].innerHTML = gValue;\n          bars[i + 1].style.width = gWidth;\n          swapped = true;\n        }\n      }\n      bars[start].style.backgroundColor = this.state.sortedColor;\n      ++start;\n    }\n    let i = start;\n    let j = end;\n    while (i <= j) {\n      bars[j].style.backgroundColor = this.state.sortedColor;\n      bars[i].style.backgroundColor = this.state.sortedColor;\n      i++;\n      j--;\n    }\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  async heapSort() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let arr = document.getElementsByClassName(\"array-bar\");\n    let temp, tempWidth;\n    let leftIndex, rightIndex, x, y;\n    let end;\n    //building heap\n    for (let e = 1; e < arr.length; e++) {\n      let i = e;\n      while (i > 0) {\n        if (\n          parseInt(arr[i].innerHTML) >\n          parseInt(arr[Math.floor((i - 1) / 2)].innerHTML)\n        ) {\n          x = i;\n          y = Math.floor((i - 1) / 2);\n          temp = arr[x].innerHTML;\n          tempWidth = arr[x].style.width;\n          arr[x].style.backgroundColor = this.state.pointerColor;\n          arr[y].style.backgroundColor = this.state.pointerColor;\n          arr[x].innerHTML = arr[y].innerHTML;\n          arr[x].style.width = arr[y].style.width;\n          arr[y].innerHTML = temp;\n          arr[y].style.width = tempWidth;\n          await this.sleep(this.getSpeed(this.state.speed));\n          arr[x].style.backgroundColor = this.state.barColor;\n          arr[y].style.backgroundColor = this.state.barColor;\n          i = y;\n        } else {\n          break;\n        }\n      }\n      if (this.state.randomize === true) return;\n      await this.sleep(this.getSpeed(this.state.speed));\n      if (this.state.randomize === true) return;\n    }\n    //heapify\n    for (let e = arr.length - 1; e > 0; e--) {\n      arr[0].style.backgroundColor = this.state.pointerColor;\n      arr[e].style.backgroundColor = this.state.pointerColor;\n      temp = arr[0].innerHTML;\n      tempWidth = arr[0].style.width;\n      arr[0].innerHTML = arr[e].innerHTML;\n      arr[0].style.width = arr[e].style.width;\n      arr[e].innerHTML = temp;\n      arr[e].style.width = tempWidth;\n      await this.sleep(this.getSpeed(this.state.speed));\n      arr[0].style.backgroundColor = this.state.barColor;\n      arr[e].style.backgroundColor = this.state.barColor;\n      end = e - 1;\n      let i = 0;\n      while (i <= end) {\n        leftIndex = 2 * i + 1;\n        if (leftIndex > end) break;\n        rightIndex = 2 * i + 2;\n        if (rightIndex > end) rightIndex = leftIndex;\n        if (\n          parseInt(arr[i].innerHTML) >=\n          Math.max(\n            parseInt(arr[leftIndex].innerHTML),\n            parseInt(arr[rightIndex].innerHTML)\n          )\n        )\n          break;\n        if (\n          parseInt(arr[leftIndex].innerHTML) >=\n          parseInt(arr[rightIndex].innerHTML)\n        ) {\n          x = i;\n          y = leftIndex;\n          arr[x].style.backgroundColor = this.state.pointerColor;\n          arr[y].style.backgroundColor = this.state.pointerColor;\n          temp = arr[x].innerHTML;\n          tempWidth = arr[x].style.width;\n          arr[x].innerHTML = arr[y].innerHTML;\n          arr[x].style.width = arr[y].style.width;\n          arr[y].innerHTML = temp;\n          arr[y].style.width = tempWidth;\n          await this.sleep(this.getSpeed(this.state.speed));\n          arr[x].style.backgroundColor = this.state.barColor;\n          arr[y].style.backgroundColor = this.state.barColor;\n          i = leftIndex;\n        } else {\n          x = i;\n          y = rightIndex;\n          arr[x].style.backgroundColor = this.state.pointerColor;\n          arr[y].style.backgroundColor = this.state.pointerColor;\n          temp = arr[x].innerHTML;\n          tempWidth = arr[x].style.width;\n          arr[x].innerHTML = arr[y].innerHTML;\n          arr[x].style.width = arr[y].style.width;\n          arr[y].innerHTML = temp;\n          arr[y].style.width = tempWidth;\n          if (this.state.randomize === true) return;\n          await this.sleep(this.getSpeed(this.state.speed));\n          if (this.state.randomize === true) return;\n          arr[x].style.backgroundColor = this.state.barColor;\n          arr[y].style.backgroundColor = this.state.barColor;\n          i = rightIndex;\n        }\n      }\n      if (this.state.randomize === true) return;\n      await this.sleep(this.getSpeed(this.state.speed));\n      if (this.state.randomize === true) return;\n      arr[e].style.backgroundColor = this.state.sortedColor;\n    }\n    arr[0].style.backgroundColor = this.state.sortedColor;\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  async insertionSort() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let bars = document.getElementsByClassName(\"array-bar\");\n    let n = bars.length;\n    let p, g, gValue, gWidth, jValue, jWidth;\n    for (let i = 1; i <= n - 1; i++) {\n      p = i;\n      bars[i].style.backgroundColor = this.state.pointerColor;\n      gValue = parseInt(bars[p].innerHTML);\n      gWidth = bars[p].style.width;\n      for (let j = p - 1; j >= 0; j--, p--) {\n        jValue = parseInt(bars[j].innerHTML);\n        jWidth = bars[j].style.width;\n        g = j;\n        bars[g].style.backgroundColor = this.state.pointerColor;\n        if (gValue >= jValue) {\n          if (this.state.randomize === true) return;\n          await this.sleep(this.getSpeed(this.state.speed));\n          if (this.state.randomize === true) return;\n          bars[g].style.backgroundColor = this.state.sortedColor;\n          break;\n        }\n        bars[j + 1].innerHTML = jValue;\n        bars[j + 1].style.width = jWidth;\n        if (this.state.randomize === true) return;\n        await this.sleep(this.getSpeed(this.state.speed));\n        if (this.state.randomize === true) return;\n        bars[g].style.backgroundColor = this.state.sortedColor;\n      }\n      bars[i].style.backgroundColor = this.state.sortedColor;\n      bars[p].innerHTML = gValue;\n      bars[p].style.width = gWidth;\n    }\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  async linearSort() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let bars = document.getElementsByClassName(\"array-bar\");\n    let n = bars.length;\n    let i, j, gValue, gWidth;\n    i = 0;\n    while (i <= n - 2) {\n      j = i + 1;\n      while (j <= n - 1) {\n        bars[i].style.backgroundColor = this.state.pointerColor;\n        bars[j].style.backgroundColor = this.state.pointerColor;\n        if (parseInt(bars[j].innerHTML) < parseInt(bars[i].innerHTML)) {\n          bars[i].style.backgroundColor = this.state.pointerColor;\n          bars[j].style.backgroundColor = this.state.pointerColor;\n          if (this.state.randomize === true) return;\n          await this.sleep(this.getSpeed(this.state.speed));\n          if (this.state.randomize === true) return;\n          bars[i].style.backgroundColor = this.state.barColor;\n          bars[j].style.backgroundColor = this.state.barColor;\n          gValue = parseInt(bars[i].innerHTML);\n          gWidth = bars[i].style.width;\n          bars[i].innerHTML = parseInt(bars[j].innerHTML);\n          bars[i].style.width = bars[j].style.width;\n          bars[j].innerHTML = gValue;\n          bars[j].style.width = gWidth;\n        }\n        if (this.state.randomize === true) return;\n        await this.sleep(this.getSpeed(this.state.speed));\n        if (this.state.randomize === true) return;\n        bars[j].style.backgroundColor = this.state.barColor;\n        bars[i].style.backgroundColor = this.state.barColor;\n        j++;\n      }\n      bars[i].style.backgroundColor = this.state.sortedColor;\n      i++;\n    }\n    bars[n - 1].style.backgroundColor = this.state.sortedColor;\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  async mergeSortUtil() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let graphics = [];\n    let arr = this.state.arr.slice();\n    let low = 0;\n    let high = arr.length - 1;\n    this.mergeSort(arr, low, high, graphics);\n    let bars = document.getElementsByClassName(\"array-bar\");\n    for (let i = 0; i < graphics.length; i++) {\n      if (graphics[i].operation === \"add\") {\n        bars[graphics[i].first].style.backgroundColor = this.state.pointerColor;\n        bars[graphics[i].second].style.backgroundColor =\n          this.state.pointerColor;\n      }\n      if (graphics[i].operation === \"remove\") {\n        bars[graphics[i].first].style.backgroundColor = this.state.barColor;\n        bars[graphics[i].second].style.backgroundColor = this.state.barColor;\n      }\n      if (graphics[i].operation === \"swap\") {\n        bars[graphics[i].first].innerHTML = graphics[i].second;\n        bars[graphics[i].first].style.width = graphics[i].second + \"px\";\n        bars[graphics[i].first].style.backgroundColor = this.state.sortedColor;\n      }\n      if (this.state.randomize === true) return;\n      await this.sleep(this.getSpeed(this.state.speed));\n      if (this.state.randomize === true) return;\n    }\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  mergeSort(arr, low, high, graphics) {\n    if (low >= high) return;\n    var middle = Math.floor((low + high) / 2);\n    this.mergeSort(arr, low, middle, graphics);\n    this.mergeSort(arr, middle + 1, high, graphics);\n    this.merge(arr, low, high, graphics);\n  }\n\n  merge(arr, low, high, graphics) {\n    let middle = Math.floor((low + high) / 2);\n    let temp = new Array(high - low + 1);\n    let i = low;\n    let j = middle + 1;\n    let r = 0;\n    while (i <= middle && j <= high) {\n      graphics.push(new Tuple(i, j, \"add\"));\n      graphics.push(new Tuple(i, j, \"remove\"));\n      if (arr[i] <= arr[j]) {\n        temp[r] = arr[i];\n        r++;\n        i++;\n      } else {\n        temp[r] = arr[j];\n        r++;\n        j++;\n      }\n    }\n    while (i <= middle) {\n      graphics.push(new Tuple(i, i, \"add\"));\n      graphics.push(new Tuple(i, i, \"remove\"));\n      temp[r] = arr[i];\n      r++;\n      i++;\n    }\n    while (j <= high) {\n      graphics.push(new Tuple(j, j, \"add\"));\n      graphics.push(new Tuple(j, j, \"remove\"));\n      temp[r] = arr[j];\n      r++;\n      j++;\n    }\n    i = low;\n    for (let k = 0; k < temp.length; ) {\n      graphics.push(new Tuple(i, temp[k], \"swap\"));\n      arr[i] = temp[k];\n      i++;\n      k++;\n    }\n  }\n\n  async quickSortUtil() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let arr = this.state.arr.slice();\n    let low = 0;\n    let high = arr.length - 1;\n    let graphics = [];\n    let gValue, gWidth;\n    let sorted = this.state.arr.slice().sort(function (a, b) {\n      return a - b;\n    });\n    this.quickSort(arr, low, high, graphics, sorted);\n    let bars = document.getElementsByClassName(\"array-bar\");\n    for (let i = 0; i < graphics.length; i++) {\n      if (graphics[i].operation === \"add\") {\n        bars[graphics[i].first].style.backgroundColor = this.state.pointerColor;\n        bars[graphics[i].second].style.backgroundColor =\n          this.state.pointerColor;\n        if (this.state.randomize === true) return;\n        await this.sleep(this.getSpeed(this.state.speed) / 2);\n        if (this.state.randomize === true) return;\n      }\n      if (graphics[i].operation === \"fix\") {\n        bars[graphics[i].first].style.backgroundColor = this.state.sortedColor;\n        bars[graphics[i].second].style.backgroundColor = this.state.sortedColor;\n      }\n      if (graphics[i].operation === \"remove\") {\n        bars[graphics[i].first].style.backgroundColor = this.state.barColor;\n        bars[graphics[i].first].style.backgroundColor = this.state.barColor;\n      }\n      if (graphics[i].operation === \"swap\") {\n        if (this.state.randomize === true) return;\n        await this.sleep(this.getSpeed(this.state.speed) / 2);\n        if (this.state.randomize === true) return;\n        gValue = bars[graphics[i].first].innerHTML;\n        gWidth = bars[graphics[i].first].style.width;\n        bars[graphics[i].first].innerHTML = bars[graphics[i].second].innerHTML;\n        bars[graphics[i].first].style.width =\n          bars[graphics[i].second].style.width;\n        bars[graphics[i].second].innerHTML = gValue;\n        bars[graphics[i].second].style.width = gWidth;\n        if (this.state.randomize === true) return;\n        await this.sleep(this.getSpeed(this.state.speed) / 2);\n        if (this.state.randomize === true) return;\n      }\n    }\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  quickSort(arr, low, high, graphics, sorted) {\n    if (low < high) {\n      let pi = this.partition(arr, low, high, graphics, sorted);\n      this.quickSort(arr, low, pi - 1, graphics, sorted);\n      this.quickSort(arr, pi + 1, high, graphics, sorted);\n    }\n  }\n\n  partition(arr, low, high, graphics, sorted) {\n    let g;\n    let pivot = arr[high];\n    let i = low - 1;\n    graphics.push(new Tuple(high, high, \"add\"));\n    for (let j = low; j <= high - 1; j++) {\n      graphics.push(new Tuple(j, j, \"add\"));\n      if (arr[j] < pivot) {\n        i++;\n        g = arr[i];\n        arr[i] = arr[j];\n        arr[j] = g;\n        graphics.push(new Tuple(i, j, \"add\"));\n        graphics.push(new Tuple(i, j, \"remove\"));\n        graphics.push(new Tuple(i, j, \"swap\"));\n      }\n      graphics.push(new Tuple(j, j, \"remove\"));\n    }\n    g = arr[i + 1];\n    arr[i + 1] = arr[high];\n    arr[high] = g;\n    graphics.push(new Tuple(i + 1, high, \"add\"));\n    graphics.push(new Tuple(i + 1, high, \"remove\"));\n    graphics.push(new Tuple(i + 1, high, \"swap\"));\n    graphics.push(new Tuple(high, high, \"remove\"));\n    for (let k = 0; k < arr.length; k++) {\n      if (arr[k] === sorted[k]) {\n        graphics.push(new Tuple(k, k, \"fix\"));\n      }\n    }\n    graphics.push(new Tuple(i + 1, i + 1, \"fix\"));\n    return i + 1;\n  }\n\n  async selectionSort() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let bars = document.getElementsByClassName(\"array-bar\");\n    let n = bars.length;\n    let m, r, gValue, gWidth;\n    for (let i = 0; i < n - 1; i++) {\n      m = i;\n      for (let j = i + 1; j < n; j++) {\n        r = m;\n        bars[r].style.backgroundColor = this.state.pointerColor;\n        bars[j].style.backgroundColor = this.state.pointerColor;\n        if (parseInt(bars[j].innerHTML) < parseInt(bars[m].innerHTML)) {\n          m = j;\n        }\n        if (this.state.randomize === true) return;\n        await this.sleep(this.getSpeed(this.state.speed));\n        if (this.state.randomize === true) return;\n        bars[r].style.backgroundColor = this.state.barColor;\n        bars[j].style.backgroundColor = this.state.barColor;\n      }\n      bars[i].style.backgroundColor = this.state.sortedColor;\n      gWidth = bars[i].style.width;\n      gValue = parseInt(bars[i].innerHTML);\n      bars[i].innerHTML = parseInt(bars[m].innerHTML);\n      bars[i].style.width = bars[m].style.width;\n      bars[m].innerHTML = gValue;\n      bars[m].style.width = gWidth;\n    }\n    bars[n - 1].style.backgroundColor = this.state.sortedColor;\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  sleep(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  getSpeed(speed) {\n    switch (speed) {\n      case \"Very Fast\":\n        return 25;\n      case \"Normal\":\n        return 250;\n      case \"Slow\":\n        return 500;\n      case \"Very Slow\":\n        return 1000;\n      default:\n        return 100;\n    }\n  }\n\n  getColor(barColor) {\n    switch (barColor) {\n      case \"Black\":\n        return \"#000000\";\n      case \"Green\":\n        return \"#026423d9\";\n      case \"Pink\":\n        return \"#d90d73cc\";\n      case \"Cyan\":\n        return \"#00e9e9\";\n      case \"Grey\":\n        return \"#424444c2\";\n      default:\n        return \"#000030ed\";\n    }\n  }\n\n  getBarHeight() {\n    let height =\n      (this.height - 300 - parseInt(this.state.size) * 5) /\n      parseInt(this.state.size);\n    return height;\n  }\n\n  getfontHeight() {\n    let fontHeight =\n      (this.height - 370 - parseInt(this.state.size) * 5) /\n      parseInt(this.state.size);\n    return fontHeight - 3;\n  }\n\n  getRandomElement() {\n    var max = 0;\n    var min = 50;\n    if (this.width < 768) max = (this.width * 5) / 10;\n    else max = (this.width * 4) / 10;\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }\n\n  render() {\n    console.log(\"Render of sorting\")\n    return (\n      <div id=\"barView\">\n        {this.state.arr.map((value, idx) => (\n          <div\n            className=\"array-bar\"\n            key={idx}\n            style={{\n              width: `${value}px`,\n              backgroundColor: `${this.state.barColor}`,\n              height: `${this.getBarHeight()}px`,\n              fontSize: `${this.getfontHeight()}px`,\n            }}\n          >\n            {value}\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default SortingVisualizer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}