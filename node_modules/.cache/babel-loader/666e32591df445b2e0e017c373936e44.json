{"ast":null,"code":"var _jsxFileName = \"C:\\\\codes\\\\1234\\\\src\\\\SortingVisualizer.js\";\nimport React from \"react\";\nimport \"./SortingVisualizer.css\";\n\nclass Tuple {\n  constructor(first, second, operation) {\n    this.first = first;\n    this.second = second;\n    this.operation = operation;\n  }\n\n}\n\nclass SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      arr: [],\n      sortingAlgorithm: \"\",\n      size: \"\",\n      speed: \"\",\n      barColor: \"\",\n      pointerColor: \"\",\n      sort: false,\n      randomize: false\n    };\n    this.sorted = false;\n    this.width = 0;\n    this.height = 0;\n  }\n\n  componentDidMount() {\n    console.log(\"Console did mount\");\n    this.width = window.screen.width;\n    this.height = window.screen.height;\n    let controllerData = this.props.controllerData;\n    let temp = new Set();\n\n    while (temp.size !== parseInt(controllerData[\"size\"])) {\n      temp.add(this.getRandomElement());\n    }\n\n    temp = Array.from(temp);\n    this.setState({\n      arr: temp,\n      sortingAlgorithm: controllerData[\"sortingAlgorithm\"],\n      size: controllerData[\"size\"],\n      speed: controllerData[\"speed\"],\n      barColor: this.getColor(controllerData[\"barColor\"]),\n      pointerColor: this.getColor(controllerData[\"pointerColor\"]),\n      sortedColor: this.getColor(controllerData[\"sortedColor\"]),\n      sort: controllerData[\"sort\"],\n      randomize: controllerData[\"randomize\"]\n    });\n  }\n\n  componentDidUpdate(previousProps, previousState) {\n    //console.log(\"Component did update mount\")\n    if (previousProps.controllerData !== this.props.controllerData) {\n      let controllerData = this.props.controllerData;\n      let cd = {};\n\n      if (controllerData[\"sort\"] === true) {\n        cd = {\n          sortingAlgorithm: controllerData[\"sortingAlgorithm\"],\n          size: controllerData[\"size\"],\n          speed: controllerData[\"speed\"],\n          barColor: this.getColor(controllerData[\"barColor\"]),\n          pointerColor: this.getColor(controllerData[\"pointerColor\"]),\n          sortedColor: this.getColor(controllerData[\"sortedColor\"]),\n          sort: controllerData[\"sort\"],\n          randomize: controllerData[\"randomize\"]\n        };\n\n        switch (controllerData.sortingAlgorithm) {\n          case \"Cocktail Sort\":\n            this.setState(cd, function () {\n              this.cocktailSort();\n            });\n            break;\n\n          case \"Heap Sort\":\n            this.setState(cd, function () {\n              this.heapSort();\n            });\n            break;\n\n          case \"Insertion Sort\":\n            this.setState(cd, function () {\n              this.insertionSort();\n            });\n            break;\n\n          case \"Linear Sort\":\n            this.setState(cd, function () {\n              this.linearSort();\n            });\n            break;\n\n          case \"Merge Sort\":\n            this.setState(cd, function () {\n              this.mergeSortUtil();\n            });\n            break;\n\n          case \"Quick Sort\":\n            this.setState(cd, function () {\n              this.quickSortUtil();\n            });\n            break;\n\n          case \"Selection Sort\":\n            this.setState(cd, function () {\n              this.selectionSort();\n              console.log(\"Selection sort\");\n            });\n            break;\n\n          default:\n            this.setState(cd, function () {\n              this.bubbleSort(); //console.log(\"bubble sort\")\n            });\n            break;\n        }\n      } // if sort=== true ends\n      else {\n          let newState = {};\n          let temp = new Set();\n\n          if (parseInt(this.state[\"size\"]) !== parseInt(controllerData[\"size\"])) {\n            newState[\"sortingAlgorithm\"] = controllerData[\"sortingAlgorithm\"];\n            newState[\"size\"] = parseInt(controllerData[\"size\"]);\n            newState[\"speed\"] = controllerData[\"speed\"];\n            newState[\"barColor\"] = this.getColor(controllerData[\"barColor\"]);\n            newState[\"pointerColor\"] = this.getColor(controllerData[\"pointerColor\"]);\n            newState[\"sortedColor\"] = this.getColor(controllerData[\"sortedColor\"]);\n            newState[\"randomize\"] = controllerData[\"randomize\"];\n            newState[\"sort\"] = controllerData[\"sort\"];\n\n            while (temp.size !== newState[\"size\"]) {\n              temp.add(this.getRandomElement());\n            }\n\n            temp = Array.from(temp);\n            newState[\"arr\"] = temp;\n          } else {\n            if (controllerData[\"randomize\"] === true) {\n              newState[\"sortingAlgorithm\"] = controllerData[\"sortingAlgorithm\"];\n              newState[\"size\"] = parseInt(controllerData[\"size\"]);\n              newState[\"speed\"] = controllerData[\"speed\"];\n              newState[\"barColor\"] = this.getColor(controllerData[\"barColor\"]);\n              newState[\"pointerColor\"] = this.getColor(controllerData[\"pointerColor\"]);\n              newState[\"sortedColor\"] = this.getColor(controllerData[\"sortedColor\"]);\n              newState[\"randomize\"] = controllerData[\"randomize\"];\n              newState[\"sort\"] = controllerData[\"sort\"];\n\n              while (temp.size !== newState[\"size\"]) {\n                temp.add(this.getRandomElement());\n              }\n\n              temp = Array.from(temp);\n              newState[\"arr\"] = temp;\n              let bars = document.getElementsByClassName(\"array-bar\");\n\n              for (let e = 0; e < bars.length; e++) bars[e].style.backgroundColor = newState[\"barColor\"];\n            } else {\n              newState[\"sortingAlgorithm\"] = controllerData[\"sortingAlgorithm\"];\n              newState[\"size\"] = parseInt(controllerData[\"size\"]);\n              newState[\"barColor\"] = this.getColor(controllerData[\"barColor\"]);\n              newState[\"pointerColor\"] = this.getColor(controllerData[\"pointerColor\"]);\n              newState[\"sortedColor\"] = this.getColor(controllerData[\"sortedColor\"]);\n              newState[\"speed\"] = controllerData[\"speed\"];\n              newState[\"arr\"] = this.state.arr;\n            }\n          }\n\n          this.setState(newState);\n        } // else sort==false\n\n    }\n  } //component did update ends\n  //--------------------------SORTING ALGORITHMS STARTS FROM HERE--------------------------------\n\n\n  async bubbleSort() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let bars = document.getElementsByClassName(\"array-bar\");\n    let n = bars.length;\n    let e, f, eIndex, fIndex;\n\n    for (let i = 0; i < n - 1; i++) {\n      for (let j = 0; j < n - i - 1; j++) {\n        bars[j].style.backgroundColor = this.state.pointerColor;\n        bars[j].style.color = \"#000000\";\n        bars[j + 1].style.backgroundColor = this.state.pointerColor;\n        bars[j + 1].style.color = \"#000000\";\n        e = parseInt(bars[j].innerHTML);\n        eIndex = j;\n        f = parseInt(bars[j + 1].innerHTML);\n        fIndex = j + 1;\n\n        if (e > f) {\n          let gValue = bars[eIndex].innerHTML;\n          let gWidth = bars[eIndex].style.width;\n          bars[eIndex].innerHTML = bars[fIndex].innerHTML;\n          bars[eIndex].style.width = bars[fIndex].style.width;\n          bars[fIndex].innerHTML = gValue;\n          bars[fIndex].style.width = gWidth;\n          if (this.state.randomize === true) return;\n          await this.sleep(this.getSpeed(this.state.speed));\n          if (this.state.randomize === true) return;\n        }\n\n        bars[j].style.backgroundColor = this.state.barColor;\n        bars[j].style.color = \"#ffffffed\";\n        bars[j + 1].style.backgroundColor = this.state.barColor;\n        bars[j + 1].style.color = \"#ffffffed\";\n      }\n\n      bars[n - i - 1].style.backgroundColor = this.state.sortedColor;\n    }\n\n    bars[0].style.backgroundColor = this.state.sortedColor;\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  async cocktailSort() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let bars = document.getElementsByClassName(\"array-bar\");\n    let n = bars.length;\n    let swapped = true;\n    let start = 0;\n    let end = n - 1;\n    let gValue, gWidth;\n\n    while (swapped) {\n      swapped = false;\n\n      for (let i = start; i < end; ++i) {\n        if (parseInt(bars[i].innerHTML) > parseInt(bars[i + 1].innerHTML)) {\n          bars[i].style.backgroundColor = this.state.pointerColor;\n          bars[i + 1].style.backgroundColor = this.state.pointerColor;\n          if (this.state.randomize === true) return;\n          await this.sleep(this.getSpeed(this.state.speed));\n          if (this.state.randomize === true) return;\n          bars[i].style.backgroundColor = this.state.barColor;\n          bars[i + 1].style.backgroundColor = this.state.barColor;\n          gValue = parseInt(bars[i].innerHTML);\n          gWidth = bars[i].style.width;\n          bars[i].innerHTML = parseInt(bars[i + 1].innerHTML);\n          bars[i].style.width = bars[i + 1].style.width;\n          bars[i + 1].innerHTML = gValue;\n          bars[i + 1].style.width = gWidth;\n          swapped = true;\n        }\n      }\n\n      if (!swapped) break;\n      swapped = false;\n      bars[end].style.backgroundColor = this.state.sortedColor;\n      --end;\n\n      for (let i = end - 1; i >= start; --i) {\n        if (parseInt(bars[i].innerHTML) > parseInt(bars[i + 1].innerHTML)) {\n          bars[i].style.backgroundColor = this.state.pointerColor;\n          bars[i + 1].style.backgroundColor = this.state.pointerColor;\n          if (this.state.randomize === true) return;\n          await this.sleep(this.getSpeed(this.state.speed));\n          if (this.state.randomize === true) return;\n          bars[i].style.backgroundColor = this.state.barColor;\n          bars[i + 1].style.backgroundColor = this.state.barColor;\n          gValue = parseInt(bars[i].innerHTML);\n          gWidth = bars[i].style.width;\n          bars[i].innerHTML = parseInt(bars[i + 1].innerHTML);\n          bars[i].style.width = bars[i + 1].style.width;\n          bars[i + 1].innerHTML = gValue;\n          bars[i + 1].style.width = gWidth;\n          swapped = true;\n        }\n      }\n\n      bars[start].style.backgroundColor = this.state.sortedColor;\n      ++start;\n    }\n\n    let i = start;\n    let j = end;\n\n    while (i <= j) {\n      bars[j].style.backgroundColor = this.state.sortedColor;\n      bars[i].style.backgroundColor = this.state.sortedColor;\n      i++;\n      j--;\n    }\n\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  async heapSort() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let arr = document.getElementsByClassName(\"array-bar\");\n    let temp, tempWidth;\n    let leftIndex, rightIndex, x, y;\n    let end; //building heap\n\n    for (let e = 1; e < arr.length; e++) {\n      let i = e;\n\n      while (i > 0) {\n        if (parseInt(arr[i].innerHTML) > parseInt(arr[Math.floor((i - 1) / 2)].innerHTML)) {\n          x = i;\n          y = Math.floor((i - 1) / 2);\n          temp = arr[x].innerHTML;\n          tempWidth = arr[x].style.width;\n          arr[x].style.backgroundColor = this.state.pointerColor;\n          arr[y].style.backgroundColor = this.state.pointerColor;\n          arr[x].innerHTML = arr[y].innerHTML;\n          arr[x].style.width = arr[y].style.width;\n          arr[y].innerHTML = temp;\n          arr[y].style.width = tempWidth;\n          await this.sleep(this.getSpeed(this.state.speed));\n          arr[x].style.backgroundColor = this.state.barColor;\n          arr[y].style.backgroundColor = this.state.barColor;\n          i = y;\n        } else {\n          break;\n        }\n      }\n\n      if (this.state.randomize === true) return;\n      await this.sleep(this.getSpeed(this.state.speed));\n      if (this.state.randomize === true) return;\n    } //heapify\n\n\n    for (let e = arr.length - 1; e > 0; e--) {\n      arr[0].style.backgroundColor = this.state.pointerColor;\n      arr[e].style.backgroundColor = this.state.pointerColor;\n      temp = arr[0].innerHTML;\n      tempWidth = arr[0].style.width;\n      arr[0].innerHTML = arr[e].innerHTML;\n      arr[0].style.width = arr[e].style.width;\n      arr[e].innerHTML = temp;\n      arr[e].style.width = tempWidth;\n      await this.sleep(this.getSpeed(this.state.speed));\n      arr[0].style.backgroundColor = this.state.barColor;\n      arr[e].style.backgroundColor = this.state.barColor;\n      end = e - 1;\n      let i = 0;\n\n      while (i <= end) {\n        leftIndex = 2 * i + 1;\n        if (leftIndex > end) break;\n        rightIndex = 2 * i + 2;\n        if (rightIndex > end) rightIndex = leftIndex;\n        if (parseInt(arr[i].innerHTML) >= Math.max(parseInt(arr[leftIndex].innerHTML), parseInt(arr[rightIndex].innerHTML))) break;\n\n        if (parseInt(arr[leftIndex].innerHTML) >= parseInt(arr[rightIndex].innerHTML)) {\n          x = i;\n          y = leftIndex;\n          arr[x].style.backgroundColor = this.state.pointerColor;\n          arr[y].style.backgroundColor = this.state.pointerColor;\n          temp = arr[x].innerHTML;\n          tempWidth = arr[x].style.width;\n          arr[x].innerHTML = arr[y].innerHTML;\n          arr[x].style.width = arr[y].style.width;\n          arr[y].innerHTML = temp;\n          arr[y].style.width = tempWidth;\n          await this.sleep(this.getSpeed(this.state.speed));\n          arr[x].style.backgroundColor = this.state.barColor;\n          arr[y].style.backgroundColor = this.state.barColor;\n          i = leftIndex;\n        } else {\n          x = i;\n          y = rightIndex;\n          arr[x].style.backgroundColor = this.state.pointerColor;\n          arr[y].style.backgroundColor = this.state.pointerColor;\n          temp = arr[x].innerHTML;\n          tempWidth = arr[x].style.width;\n          arr[x].innerHTML = arr[y].innerHTML;\n          arr[x].style.width = arr[y].style.width;\n          arr[y].innerHTML = temp;\n          arr[y].style.width = tempWidth;\n          if (this.state.randomize === true) return;\n          await this.sleep(this.getSpeed(this.state.speed));\n          if (this.state.randomize === true) return;\n          arr[x].style.backgroundColor = this.state.barColor;\n          arr[y].style.backgroundColor = this.state.barColor;\n          i = rightIndex;\n        }\n      }\n\n      if (this.state.randomize === true) return;\n      await this.sleep(this.getSpeed(this.state.speed));\n      if (this.state.randomize === true) return;\n      arr[e].style.backgroundColor = this.state.sortedColor;\n    }\n\n    arr[0].style.backgroundColor = this.state.sortedColor;\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  async insertionSort() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let bars = document.getElementsByClassName(\"array-bar\");\n    let n = bars.length;\n    let p, g, gValue, gWidth, jValue, jWidth;\n\n    for (let i = 1; i <= n - 1; i++) {\n      p = i;\n      bars[i].style.backgroundColor = this.state.pointerColor;\n      gValue = parseInt(bars[p].innerHTML);\n      gWidth = bars[p].style.width;\n\n      for (let j = p - 1; j >= 0; j--, p--) {\n        jValue = parseInt(bars[j].innerHTML);\n        jWidth = bars[j].style.width;\n        g = j;\n        bars[g].style.backgroundColor = this.state.pointerColor;\n\n        if (gValue >= jValue) {\n          if (this.state.randomize === true) return;\n          await this.sleep(this.getSpeed(this.state.speed));\n          if (this.state.randomize === true) return;\n          bars[g].style.backgroundColor = this.state.sortedColor;\n          break;\n        }\n\n        bars[j + 1].innerHTML = jValue;\n        bars[j + 1].style.width = jWidth;\n        if (this.state.randomize === true) return;\n        await this.sleep(this.getSpeed(this.state.speed));\n        if (this.state.randomize === true) return;\n        bars[g].style.backgroundColor = this.state.sortedColor;\n      }\n\n      bars[i].style.backgroundColor = this.state.sortedColor;\n      bars[p].innerHTML = gValue;\n      bars[p].style.width = gWidth;\n    }\n\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  async linearSort() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let bars = document.getElementsByClassName(\"array-bar\");\n    let n = bars.length;\n    let i, j, gValue, gWidth;\n    i = 0;\n\n    while (i <= n - 2) {\n      j = i + 1;\n\n      while (j <= n - 1) {\n        bars[i].style.backgroundColor = this.state.pointerColor;\n        bars[j].style.backgroundColor = this.state.pointerColor;\n\n        if (parseInt(bars[j].innerHTML) < parseInt(bars[i].innerHTML)) {\n          bars[i].style.backgroundColor = this.state.pointerColor;\n          bars[j].style.backgroundColor = this.state.pointerColor;\n          if (this.state.randomize === true) return;\n          await this.sleep(this.getSpeed(this.state.speed));\n          if (this.state.randomize === true) return;\n          bars[i].style.backgroundColor = this.state.barColor;\n          bars[j].style.backgroundColor = this.state.barColor;\n          gValue = parseInt(bars[i].innerHTML);\n          gWidth = bars[i].style.width;\n          bars[i].innerHTML = parseInt(bars[j].innerHTML);\n          bars[i].style.width = bars[j].style.width;\n          bars[j].innerHTML = gValue;\n          bars[j].style.width = gWidth;\n        }\n\n        if (this.state.randomize === true) return;\n        await this.sleep(this.getSpeed(this.state.speed));\n        if (this.state.randomize === true) return;\n        bars[j].style.backgroundColor = this.state.barColor;\n        bars[i].style.backgroundColor = this.state.barColor;\n        j++;\n      }\n\n      bars[i].style.backgroundColor = this.state.sortedColor;\n      i++;\n    }\n\n    bars[n - 1].style.backgroundColor = this.state.sortedColor;\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  async mergeSortUtil() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let graphics = [];\n    let arr = this.state.arr.slice();\n    let low = 0;\n    let high = arr.length - 1;\n    this.mergeSort(arr, low, high, graphics);\n    let bars = document.getElementsByClassName(\"array-bar\");\n\n    for (let i = 0; i < graphics.length; i++) {\n      if (graphics[i].operation === \"add\") {\n        bars[graphics[i].first].style.backgroundColor = this.state.pointerColor;\n        bars[graphics[i].second].style.backgroundColor = this.state.pointerColor;\n      }\n\n      if (graphics[i].operation === \"remove\") {\n        bars[graphics[i].first].style.backgroundColor = this.state.barColor;\n        bars[graphics[i].second].style.backgroundColor = this.state.barColor;\n      }\n\n      if (graphics[i].operation === \"swap\") {\n        bars[graphics[i].first].innerHTML = graphics[i].second;\n        bars[graphics[i].first].style.width = graphics[i].second + \"px\";\n        bars[graphics[i].first].style.backgroundColor = this.state.sortedColor;\n      }\n\n      if (this.state.randomize === true) return;\n      await this.sleep(this.getSpeed(this.state.speed));\n      if (this.state.randomize === true) return;\n    }\n\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  mergeSort(arr, low, high, graphics) {\n    if (low >= high) return;\n    var middle = Math.floor((low + high) / 2);\n    this.mergeSort(arr, low, middle, graphics);\n    this.mergeSort(arr, middle + 1, high, graphics);\n    this.merge(arr, low, high, graphics);\n  }\n\n  merge(arr, low, high, graphics) {\n    let middle = Math.floor((low + high) / 2);\n    let temp = new Array(high - low + 1);\n    let i = low;\n    let j = middle + 1;\n    let r = 0;\n\n    while (i <= middle && j <= high) {\n      graphics.push(new Tuple(i, j, \"add\"));\n      graphics.push(new Tuple(i, j, \"remove\"));\n\n      if (arr[i] <= arr[j]) {\n        temp[r] = arr[i];\n        r++;\n        i++;\n      } else {\n        temp[r] = arr[j];\n        r++;\n        j++;\n      }\n    }\n\n    while (i <= middle) {\n      graphics.push(new Tuple(i, i, \"add\"));\n      graphics.push(new Tuple(i, i, \"remove\"));\n      temp[r] = arr[i];\n      r++;\n      i++;\n    }\n\n    while (j <= high) {\n      graphics.push(new Tuple(j, j, \"add\"));\n      graphics.push(new Tuple(j, j, \"remove\"));\n      temp[r] = arr[j];\n      r++;\n      j++;\n    }\n\n    i = low;\n\n    for (let k = 0; k < temp.length;) {\n      graphics.push(new Tuple(i, temp[k], \"swap\"));\n      arr[i] = temp[k];\n      i++;\n      k++;\n    }\n  }\n\n  async quickSortUtil() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let arr = this.state.arr.slice();\n    let low = 0;\n    let high = arr.length - 1;\n    let graphics = [];\n    let gValue, gWidth;\n    let sorted = this.state.arr.slice().sort(function (a, b) {\n      return a - b;\n    });\n    this.quickSort(arr, low, high, graphics, sorted);\n    let bars = document.getElementsByClassName(\"array-bar\");\n\n    for (let i = 0; i < graphics.length; i++) {\n      if (graphics[i].operation === \"add\") {\n        bars[graphics[i].first].style.backgroundColor = this.state.pointerColor;\n        bars[graphics[i].second].style.backgroundColor = this.state.pointerColor;\n        if (this.state.randomize === true) return;\n        await this.sleep(this.getSpeed(this.state.speed) / 2);\n        if (this.state.randomize === true) return;\n      }\n\n      if (graphics[i].operation === \"fix\") {\n        bars[graphics[i].first].style.backgroundColor = this.state.sortedColor;\n        bars[graphics[i].second].style.backgroundColor = this.state.sortedColor;\n      }\n\n      if (graphics[i].operation === \"remove\") {\n        bars[graphics[i].first].style.backgroundColor = this.state.barColor;\n        bars[graphics[i].first].style.backgroundColor = this.state.barColor;\n      }\n\n      if (graphics[i].operation === \"swap\") {\n        if (this.state.randomize === true) return;\n        await this.sleep(this.getSpeed(this.state.speed) / 2);\n        if (this.state.randomize === true) return;\n        gValue = bars[graphics[i].first].innerHTML;\n        gWidth = bars[graphics[i].first].style.width;\n        bars[graphics[i].first].innerHTML = bars[graphics[i].second].innerHTML;\n        bars[graphics[i].first].style.width = bars[graphics[i].second].style.width;\n        bars[graphics[i].second].innerHTML = gValue;\n        bars[graphics[i].second].style.width = gWidth;\n        if (this.state.randomize === true) return;\n        await this.sleep(this.getSpeed(this.state.speed) / 2);\n        if (this.state.randomize === true) return;\n      }\n    }\n\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  quickSort(arr, low, high, graphics, sorted) {\n    if (low < high) {\n      let pi = this.partition(arr, low, high, graphics, sorted);\n      this.quickSort(arr, low, pi - 1, graphics, sorted);\n      this.quickSort(arr, pi + 1, high, graphics, sorted);\n    }\n  }\n\n  partition(arr, low, high, graphics, sorted) {\n    let g;\n    let pivot = arr[high];\n    let i = low - 1;\n    graphics.push(new Tuple(high, high, \"add\"));\n\n    for (let j = low; j <= high - 1; j++) {\n      graphics.push(new Tuple(j, j, \"add\"));\n\n      if (arr[j] < pivot) {\n        i++;\n        g = arr[i];\n        arr[i] = arr[j];\n        arr[j] = g;\n        graphics.push(new Tuple(i, j, \"add\"));\n        graphics.push(new Tuple(i, j, \"remove\"));\n        graphics.push(new Tuple(i, j, \"swap\"));\n      }\n\n      graphics.push(new Tuple(j, j, \"remove\"));\n    }\n\n    g = arr[i + 1];\n    arr[i + 1] = arr[high];\n    arr[high] = g;\n    graphics.push(new Tuple(i + 1, high, \"add\"));\n    graphics.push(new Tuple(i + 1, high, \"remove\"));\n    graphics.push(new Tuple(i + 1, high, \"swap\"));\n    graphics.push(new Tuple(high, high, \"remove\"));\n\n    for (let k = 0; k < arr.length; k++) {\n      if (arr[k] === sorted[k]) {\n        graphics.push(new Tuple(k, k, \"fix\"));\n      }\n    }\n\n    graphics.push(new Tuple(i + 1, i + 1, \"fix\"));\n    return i + 1;\n  }\n\n  async selectionSort() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let bars = document.getElementsByClassName(\"array-bar\");\n    let n = bars.length;\n    let m, r, gValue, gWidth;\n\n    for (let i = 0; i < n - 1; i++) {\n      m = i;\n\n      for (let j = i + 1; j < n; j++) {\n        r = m;\n        bars[r].style.backgroundColor = this.state.pointerColor;\n        bars[j].style.backgroundColor = this.state.pointerColor;\n\n        if (parseInt(bars[j].innerHTML) < parseInt(bars[m].innerHTML)) {\n          m = j;\n        }\n\n        if (this.state.randomize === true) return;\n        await this.sleep(this.getSpeed(this.state.speed));\n        if (this.state.randomize === true) return;\n        bars[r].style.backgroundColor = this.state.barColor;\n        bars[j].style.backgroundColor = this.state.barColor;\n      }\n\n      bars[i].style.backgroundColor = this.state.sortedColor;\n      gWidth = bars[i].style.width;\n      gValue = parseInt(bars[i].innerHTML);\n      bars[i].innerHTML = parseInt(bars[m].innerHTML);\n      bars[i].style.width = bars[m].style.width;\n      bars[m].innerHTML = gValue;\n      bars[m].style.width = gWidth;\n    }\n\n    bars[n - 1].style.backgroundColor = this.state.sortedColor;\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  getSpeed(speed) {\n    switch (speed) {\n      case \"Very Fast\":\n        return 25;\n\n      case \"Normal\":\n        return 250;\n\n      case \"Slow\":\n        return 500;\n\n      case \"Very Slow\":\n        return 1000;\n\n      default:\n        return 100;\n    }\n  }\n\n  getColor(barColor) {\n    switch (barColor) {\n      case \"Black\":\n        return \"#000000\";\n\n      case \"Cyan\":\n        return \"#00e6e6\";\n\n      case \"Green\":\n        return \"#026423d9\";\n\n      case \"Pink\":\n        return \"#e600e6\";\n\n      case \"Red\":\n        return \"#a70202d9\";\n\n      case \"Grey\":\n        return \"#424444c2\";\n\n      default:\n        return \"#000030ed\";\n    }\n  }\n\n  getBarHeight() {\n    let height = (this.height - 250 - parseInt(this.state.size) * 5) / parseInt(this.state.size);\n    return height;\n  }\n\n  getfontHeight() {\n    let fontHeight = (this.height - 370 - parseInt(this.state.size) * 5) / parseInt(this.state.size);\n    return fontHeight - 3;\n  }\n\n  getRandomElement() {\n    var max = 0;\n    var min = 50;\n    if (this.width < 768) max = this.width * 8 / 10;else max = this.width * 6 / 10;\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"barView\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 754,\n        columnNumber: 7\n      }\n    }, this.state.arr.map((value, idx) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-bar\",\n      key: idx,\n      style: {\n        width: `${value + 10}px`,\n        backgroundColor: `${this.state.barColor}`,\n        height: `${this.getBarHeight()}px`,\n        fontSize: `${this.getfontHeight()}px`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 756,\n        columnNumber: 11\n      }\n    }, value)));\n  }\n\n}\n\nexport default SortingVisualizer;","map":{"version":3,"sources":["C:/codes/1234/src/SortingVisualizer.js"],"names":["React","Tuple","constructor","first","second","operation","SortingVisualizer","Component","props","state","arr","sortingAlgorithm","size","speed","barColor","pointerColor","sort","randomize","sorted","width","height","componentDidMount","console","log","window","screen","controllerData","temp","Set","parseInt","add","getRandomElement","Array","from","setState","getColor","sortedColor","componentDidUpdate","previousProps","previousState","cd","cocktailSort","heapSort","insertionSort","linearSort","mergeSortUtil","quickSortUtil","selectionSort","bubbleSort","newState","bars","document","getElementsByClassName","e","length","style","backgroundColor","visualizerDataHandler","n","f","eIndex","fIndex","i","j","color","innerHTML","gValue","gWidth","sleep","getSpeed","swapped","start","end","tempWidth","leftIndex","rightIndex","x","y","Math","floor","max","p","g","jValue","jWidth","graphics","slice","low","high","mergeSort","middle","merge","r","push","k","a","b","quickSort","pi","partition","pivot","m","ms","Promise","resolve","setTimeout","getBarHeight","getfontHeight","fontHeight","min","random","render","map","value","idx","fontSize"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./SortingVisualizer.css\";\n\nclass Tuple {\n  constructor(first, second, operation) {\n    this.first = first;\n    this.second = second;\n    this.operation = operation;\n  }\n}\n\nclass SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      arr: [],\n      sortingAlgorithm: \"\",\n      size: \"\",\n      speed: \"\",\n      barColor: \"\",\n      pointerColor: \"\",\n      sort: false,\n      randomize: false,\n    };\n    this.sorted = false;\n    this.width = 0;\n    this.height = 0;\n  }\n\n  componentDidMount() {\n    console.log(\"Console did mount\")\n    this.width = window.screen.width;\n    this.height = window.screen.height;\n    \n    \n    let controllerData = this.props.controllerData;\n    let temp = new Set();\n    while (temp.size !== parseInt(controllerData[\"size\"])) {\n      temp.add(this.getRandomElement());\n    }\n    temp = Array.from(temp);\n    this.setState({\n      arr: temp,\n      sortingAlgorithm: controllerData[\"sortingAlgorithm\"],\n      size: controllerData[\"size\"],\n      speed: controllerData[\"speed\"],\n      barColor: this.getColor(controllerData[\"barColor\"]),\n      pointerColor: this.getColor(controllerData[\"pointerColor\"]),\n      sortedColor: this.getColor(controllerData[\"sortedColor\"]),\n      sort: controllerData[\"sort\"],\n      randomize: controllerData[\"randomize\"],\n    });\n  }\n\n  componentDidUpdate(previousProps, previousState) {\n    //console.log(\"Component did update mount\")\n    if (previousProps.controllerData !== this.props.controllerData) {\n      let controllerData = this.props.controllerData;\n      let cd = {};\n      if (controllerData[\"sort\"] === true) {\n        cd = {\n          sortingAlgorithm: controllerData[\"sortingAlgorithm\"],\n          size: controllerData[\"size\"],\n          speed: controllerData[\"speed\"],\n          barColor: this.getColor(controllerData[\"barColor\"]),\n          pointerColor: this.getColor(controllerData[\"pointerColor\"]),\n          sortedColor: this.getColor(controllerData[\"sortedColor\"]),\n          sort: controllerData[\"sort\"],\n          randomize: controllerData[\"randomize\"],\n        };\n        switch (controllerData.sortingAlgorithm) {\n          case \"Cocktail Sort\":\n            this.setState(cd, function () {\n              this.cocktailSort();\n            });\n            break;\n\n          case \"Heap Sort\":\n            this.setState(cd, function () {\n              this.heapSort();\n            });\n            break;\n\n          case \"Insertion Sort\":\n            this.setState(cd, function () {\n              this.insertionSort();\n            });\n            break;\n\n          case \"Linear Sort\":\n            this.setState(cd, function () {\n              this.linearSort();\n            });\n            break;\n\n          case \"Merge Sort\":\n            this.setState(cd, function () {\n              this.mergeSortUtil();\n            });\n            break;\n\n          case \"Quick Sort\":\n            this.setState(cd, function () {\n              this.quickSortUtil();\n            });\n            break;\n\n          case \"Selection Sort\":\n            this.setState(cd, function () {\n              this.selectionSort();\n              console.log(\"Selection sort\")\n            });\n            break;\n\n          default:\n            this.setState(cd, function () {\n              this.bubbleSort();\n              //console.log(\"bubble sort\")\n            });\n            break;\n        }\n      } // if sort=== true ends\n      else {\n        let newState = {};\n        let temp = new Set();\n        if (parseInt(this.state[\"size\"]) !== parseInt(controllerData[\"size\"])) {\n          newState[\"sortingAlgorithm\"] = controllerData[\"sortingAlgorithm\"];\n          newState[\"size\"] = parseInt(controllerData[\"size\"]);\n          newState[\"speed\"] = controllerData[\"speed\"];\n          newState[\"barColor\"] = this.getColor(controllerData[\"barColor\"]);\n          newState[\"pointerColor\"] = this.getColor(\n            controllerData[\"pointerColor\"]\n          );\n          newState[\"sortedColor\"] = this.getColor(\n            controllerData[\"sortedColor\"]\n          );\n          newState[\"randomize\"] = controllerData[\"randomize\"];\n          newState[\"sort\"] = controllerData[\"sort\"];\n          while (temp.size !== newState[\"size\"]) {\n            temp.add(this.getRandomElement());\n          }\n          temp = Array.from(temp);\n          newState[\"arr\"] = temp;\n        } else {\n          if (controllerData[\"randomize\"] === true) {\n            newState[\"sortingAlgorithm\"] = controllerData[\"sortingAlgorithm\"];\n            newState[\"size\"] = parseInt(controllerData[\"size\"]);\n            newState[\"speed\"] = controllerData[\"speed\"];\n            newState[\"barColor\"] = this.getColor(controllerData[\"barColor\"]);\n            newState[\"pointerColor\"] = this.getColor(\n              controllerData[\"pointerColor\"]\n            );\n            newState[\"sortedColor\"] = this.getColor(\n              controllerData[\"sortedColor\"]\n            );\n            newState[\"randomize\"] = controllerData[\"randomize\"];\n            newState[\"sort\"] = controllerData[\"sort\"];\n            while (temp.size !== newState[\"size\"]) {\n              temp.add(this.getRandomElement());\n            }\n            temp = Array.from(temp);\n            newState[\"arr\"] = temp;\n            let bars = document.getElementsByClassName(\"array-bar\");\n            for (let e = 0; e < bars.length; e++)\n              bars[e].style.backgroundColor = newState[\"barColor\"];\n          } else {\n            newState[\"sortingAlgorithm\"] = controllerData[\"sortingAlgorithm\"];\n            newState[\"size\"] = parseInt(controllerData[\"size\"]);\n            newState[\"barColor\"] = this.getColor(controllerData[\"barColor\"]);\n            newState[\"pointerColor\"] = this.getColor(\n              controllerData[\"pointerColor\"]\n            );\n            newState[\"sortedColor\"] = this.getColor(\n              controllerData[\"sortedColor\"]\n            );\n            newState[\"speed\"] = controllerData[\"speed\"];\n            newState[\"arr\"] = this.state.arr;\n          }\n        }\n        this.setState(newState);\n      }// else sort==false\n    }\n  } //component did update ends\n\n\n  //--------------------------SORTING ALGORITHMS STARTS FROM HERE--------------------------------\n  async bubbleSort() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let bars = document.getElementsByClassName(\"array-bar\");\n    let n = bars.length;\n    let e, f, eIndex, fIndex;\n    for (let i = 0; i < n - 1; i++) {\n      for (let j = 0; j < n - i - 1; j++) {\n        bars[j].style.backgroundColor = this.state.pointerColor;\n        bars[j].style.color =\"#000000\";\n        bars[j + 1].style.backgroundColor = this.state.pointerColor;\n        bars[j + 1].style.color =\"#000000\";\n        e = parseInt(bars[j].innerHTML);\n        eIndex = j;\n        f = parseInt(bars[j + 1].innerHTML);\n        fIndex = j + 1;\n        if (e > f) {\n          let gValue = bars[eIndex].innerHTML;\n          let gWidth = bars[eIndex].style.width;\n          bars[eIndex].innerHTML = bars[fIndex].innerHTML;\n          bars[eIndex].style.width = bars[fIndex].style.width;\n          bars[fIndex].innerHTML = gValue;\n          bars[fIndex].style.width = gWidth;\n          if (this.state.randomize === true) return;\n          await this.sleep(this.getSpeed(this.state.speed));\n          if (this.state.randomize === true) return;\n        }\n        bars[j].style.backgroundColor = this.state.barColor;\n        bars[j].style.color = \"#ffffffed\";\n        bars[j + 1].style.backgroundColor = this.state.barColor;\n        bars[j+1].style.color = \"#ffffffed\";\n      }\n      bars[n - i - 1].style.backgroundColor = this.state.sortedColor;\n    }\n    bars[0].style.backgroundColor = this.state.sortedColor;\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  async cocktailSort() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let bars = document.getElementsByClassName(\"array-bar\");\n    let n = bars.length;\n    let swapped = true;\n    let start = 0;\n    let end = n - 1;\n    let gValue, gWidth;\n    while (swapped) {\n      swapped = false;\n      for (let i = start; i < end; ++i) {\n        if (parseInt(bars[i].innerHTML) > parseInt(bars[i + 1].innerHTML)) {\n          bars[i].style.backgroundColor = this.state.pointerColor;\n          bars[i + 1].style.backgroundColor = this.state.pointerColor;\n          if (this.state.randomize === true) return;\n          await this.sleep(this.getSpeed(this.state.speed));\n          if (this.state.randomize === true) return;\n          bars[i].style.backgroundColor = this.state.barColor;\n          bars[i + 1].style.backgroundColor = this.state.barColor;\n          gValue = parseInt(bars[i].innerHTML);\n          gWidth = bars[i].style.width;\n          bars[i].innerHTML = parseInt(bars[i + 1].innerHTML);\n          bars[i].style.width = bars[i + 1].style.width;\n          bars[i + 1].innerHTML = gValue;\n          bars[i + 1].style.width = gWidth;\n          swapped = true;\n        }\n      }\n      if (!swapped) break;\n      swapped = false;\n      bars[end].style.backgroundColor = this.state.sortedColor;\n      --end;\n      for (let i = end - 1; i >= start; --i) {\n        if (parseInt(bars[i].innerHTML) > parseInt(bars[i + 1].innerHTML)) {\n          bars[i].style.backgroundColor = this.state.pointerColor;\n          bars[i + 1].style.backgroundColor = this.state.pointerColor;\n          if (this.state.randomize === true) return;\n          await this.sleep(this.getSpeed(this.state.speed));\n          if (this.state.randomize === true) return;\n          bars[i].style.backgroundColor = this.state.barColor;\n          bars[i + 1].style.backgroundColor = this.state.barColor;\n          gValue = parseInt(bars[i].innerHTML);\n          gWidth = bars[i].style.width;\n          bars[i].innerHTML = parseInt(bars[i + 1].innerHTML);\n          bars[i].style.width = bars[i + 1].style.width;\n          bars[i + 1].innerHTML = gValue;\n          bars[i + 1].style.width = gWidth;\n          swapped = true;\n        }\n      }\n      bars[start].style.backgroundColor = this.state.sortedColor;\n      ++start;\n    }\n    let i = start;\n    let j = end;\n    while (i <= j) {\n      bars[j].style.backgroundColor = this.state.sortedColor;\n      bars[i].style.backgroundColor = this.state.sortedColor;\n      i++;\n      j--;\n    }\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  async heapSort() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let arr = document.getElementsByClassName(\"array-bar\");\n    let temp, tempWidth;\n    let leftIndex, rightIndex, x, y;\n    let end;\n    //building heap\n    for (let e = 1; e < arr.length; e++) {\n      let i = e;\n      while (i > 0) {\n        if (\n          parseInt(arr[i].innerHTML) >\n          parseInt(arr[Math.floor((i - 1) / 2)].innerHTML)\n        ) {\n          x = i;\n          y = Math.floor((i - 1) / 2);\n          temp = arr[x].innerHTML;\n          tempWidth = arr[x].style.width;\n          arr[x].style.backgroundColor = this.state.pointerColor;\n          arr[y].style.backgroundColor = this.state.pointerColor;\n          arr[x].innerHTML = arr[y].innerHTML;\n          arr[x].style.width = arr[y].style.width;\n          arr[y].innerHTML = temp;\n          arr[y].style.width = tempWidth;\n          await this.sleep(this.getSpeed(this.state.speed));\n          arr[x].style.backgroundColor = this.state.barColor;\n          arr[y].style.backgroundColor = this.state.barColor;\n          i = y;\n        } else {\n          break;\n        }\n      }\n      if (this.state.randomize === true) return;\n      await this.sleep(this.getSpeed(this.state.speed));\n      if (this.state.randomize === true) return;\n    }\n    //heapify\n    for (let e = arr.length - 1; e > 0; e--) {\n      arr[0].style.backgroundColor = this.state.pointerColor;\n      arr[e].style.backgroundColor = this.state.pointerColor;\n      temp = arr[0].innerHTML;\n      tempWidth = arr[0].style.width;\n      arr[0].innerHTML = arr[e].innerHTML;\n      arr[0].style.width = arr[e].style.width;\n      arr[e].innerHTML = temp;\n      arr[e].style.width = tempWidth;\n      await this.sleep(this.getSpeed(this.state.speed));\n      arr[0].style.backgroundColor = this.state.barColor;\n      arr[e].style.backgroundColor = this.state.barColor;\n      end = e - 1;\n      let i = 0;\n      while (i <= end) {\n        leftIndex = 2 * i + 1;\n        if (leftIndex > end) break;\n        rightIndex = 2 * i + 2;\n        if (rightIndex > end) rightIndex = leftIndex;\n        if (\n          parseInt(arr[i].innerHTML) >=\n          Math.max(\n            parseInt(arr[leftIndex].innerHTML),\n            parseInt(arr[rightIndex].innerHTML)\n          )\n        )\n          break;\n        if (\n          parseInt(arr[leftIndex].innerHTML) >=\n          parseInt(arr[rightIndex].innerHTML)\n        ) {\n          x = i;\n          y = leftIndex;\n          arr[x].style.backgroundColor = this.state.pointerColor;\n          arr[y].style.backgroundColor = this.state.pointerColor;\n          temp = arr[x].innerHTML;\n          tempWidth = arr[x].style.width;\n          arr[x].innerHTML = arr[y].innerHTML;\n          arr[x].style.width = arr[y].style.width;\n          arr[y].innerHTML = temp;\n          arr[y].style.width = tempWidth;\n          await this.sleep(this.getSpeed(this.state.speed));\n          arr[x].style.backgroundColor = this.state.barColor;\n          arr[y].style.backgroundColor = this.state.barColor;\n          i = leftIndex;\n        } else {\n          x = i;\n          y = rightIndex;\n          arr[x].style.backgroundColor = this.state.pointerColor;\n          arr[y].style.backgroundColor = this.state.pointerColor;\n          temp = arr[x].innerHTML;\n          tempWidth = arr[x].style.width;\n          arr[x].innerHTML = arr[y].innerHTML;\n          arr[x].style.width = arr[y].style.width;\n          arr[y].innerHTML = temp;\n          arr[y].style.width = tempWidth;\n          if (this.state.randomize === true) return;\n          await this.sleep(this.getSpeed(this.state.speed));\n          if (this.state.randomize === true) return;\n          arr[x].style.backgroundColor = this.state.barColor;\n          arr[y].style.backgroundColor = this.state.barColor;\n          i = rightIndex;\n        }\n      }\n      if (this.state.randomize === true) return;\n      await this.sleep(this.getSpeed(this.state.speed));\n      if (this.state.randomize === true) return;\n      arr[e].style.backgroundColor = this.state.sortedColor;\n    }\n    arr[0].style.backgroundColor = this.state.sortedColor;\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  async insertionSort() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let bars = document.getElementsByClassName(\"array-bar\");\n    let n = bars.length;\n    let p, g, gValue, gWidth, jValue, jWidth;\n    for (let i = 1; i <= n - 1; i++) {\n      p = i;\n      bars[i].style.backgroundColor = this.state.pointerColor;\n      gValue = parseInt(bars[p].innerHTML);\n      gWidth = bars[p].style.width;\n      for (let j = p - 1; j >= 0; j--, p--) {\n        jValue = parseInt(bars[j].innerHTML);\n        jWidth = bars[j].style.width;\n        g = j;\n        bars[g].style.backgroundColor = this.state.pointerColor;\n        if (gValue >= jValue) {\n          if (this.state.randomize === true) return;\n          await this.sleep(this.getSpeed(this.state.speed));\n          if (this.state.randomize === true) return;\n          bars[g].style.backgroundColor = this.state.sortedColor;\n          break;\n        }\n        bars[j + 1].innerHTML = jValue;\n        bars[j + 1].style.width = jWidth;\n        if (this.state.randomize === true) return;\n        await this.sleep(this.getSpeed(this.state.speed));\n        if (this.state.randomize === true) return;\n        bars[g].style.backgroundColor = this.state.sortedColor;\n      }\n      bars[i].style.backgroundColor = this.state.sortedColor;\n      bars[p].innerHTML = gValue;\n      bars[p].style.width = gWidth;\n    }\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  async linearSort() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let bars = document.getElementsByClassName(\"array-bar\");\n    let n = bars.length;\n    let i, j, gValue, gWidth;\n    i = 0;\n    while (i <= n - 2) {\n      j = i + 1;\n      while (j <= n - 1) {\n        bars[i].style.backgroundColor = this.state.pointerColor;\n        bars[j].style.backgroundColor = this.state.pointerColor;\n        if (parseInt(bars[j].innerHTML) < parseInt(bars[i].innerHTML)) {\n          bars[i].style.backgroundColor = this.state.pointerColor;\n          bars[j].style.backgroundColor = this.state.pointerColor;\n          if (this.state.randomize === true) return;\n          await this.sleep(this.getSpeed(this.state.speed));\n          if (this.state.randomize === true) return;\n          bars[i].style.backgroundColor = this.state.barColor;\n          bars[j].style.backgroundColor = this.state.barColor;\n          gValue = parseInt(bars[i].innerHTML);\n          gWidth = bars[i].style.width;\n          bars[i].innerHTML = parseInt(bars[j].innerHTML);\n          bars[i].style.width = bars[j].style.width;\n          bars[j].innerHTML = gValue;\n          bars[j].style.width = gWidth;\n        }\n        if (this.state.randomize === true) return;\n        await this.sleep(this.getSpeed(this.state.speed));\n        if (this.state.randomize === true) return;\n        bars[j].style.backgroundColor = this.state.barColor;\n        bars[i].style.backgroundColor = this.state.barColor;\n        j++;\n      }\n      bars[i].style.backgroundColor = this.state.sortedColor;\n      i++;\n    }\n    bars[n - 1].style.backgroundColor = this.state.sortedColor;\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  async mergeSortUtil() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let graphics = [];\n    let arr = this.state.arr.slice();\n    let low = 0;\n    let high = arr.length - 1;\n    this.mergeSort(arr, low, high, graphics);\n    let bars = document.getElementsByClassName(\"array-bar\");\n    for (let i = 0; i < graphics.length; i++) {\n      if (graphics[i].operation === \"add\") {\n        bars[graphics[i].first].style.backgroundColor = this.state.pointerColor;\n        bars[graphics[i].second].style.backgroundColor =\n          this.state.pointerColor;\n      }\n      if (graphics[i].operation === \"remove\") {\n        bars[graphics[i].first].style.backgroundColor = this.state.barColor;\n        bars[graphics[i].second].style.backgroundColor = this.state.barColor;\n      }\n      if (graphics[i].operation === \"swap\") {\n        bars[graphics[i].first].innerHTML = graphics[i].second;\n        bars[graphics[i].first].style.width = graphics[i].second + \"px\";\n        bars[graphics[i].first].style.backgroundColor = this.state.sortedColor;\n      }\n      if (this.state.randomize === true) return;\n      await this.sleep(this.getSpeed(this.state.speed));\n      if (this.state.randomize === true) return;\n    }\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  mergeSort(arr, low, high, graphics) {\n    if (low >= high) return;\n    var middle = Math.floor((low + high) / 2);\n    this.mergeSort(arr, low, middle, graphics);\n    this.mergeSort(arr, middle + 1, high, graphics);\n    this.merge(arr, low, high, graphics);\n  }\n\n  merge(arr, low, high, graphics) {\n    let middle = Math.floor((low + high) / 2);\n    let temp = new Array(high - low + 1);\n    let i = low;\n    let j = middle + 1;\n    let r = 0;\n    while (i <= middle && j <= high) {\n      graphics.push(new Tuple(i, j, \"add\"));\n      graphics.push(new Tuple(i, j, \"remove\"));\n      if (arr[i] <= arr[j]) {\n        temp[r] = arr[i];\n        r++;\n        i++;\n      } else {\n        temp[r] = arr[j];\n        r++;\n        j++;\n      }\n    }\n    while (i <= middle) {\n      graphics.push(new Tuple(i, i, \"add\"));\n      graphics.push(new Tuple(i, i, \"remove\"));\n      temp[r] = arr[i];\n      r++;\n      i++;\n    }\n    while (j <= high) {\n      graphics.push(new Tuple(j, j, \"add\"));\n      graphics.push(new Tuple(j, j, \"remove\"));\n      temp[r] = arr[j];\n      r++;\n      j++;\n    }\n    i = low;\n    for (let k = 0; k < temp.length; ) {\n      graphics.push(new Tuple(i, temp[k], \"swap\"));\n      arr[i] = temp[k];\n      i++;\n      k++;\n    }\n  }\n\n  async quickSortUtil() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let arr = this.state.arr.slice();\n    let low = 0;\n    let high = arr.length - 1;\n    let graphics = [];\n    let gValue, gWidth;\n    let sorted = this.state.arr.slice().sort(function (a, b) {\n      return a - b;\n    });\n    this.quickSort(arr, low, high, graphics, sorted);\n    let bars = document.getElementsByClassName(\"array-bar\");\n    for (let i = 0; i < graphics.length; i++) {\n      if (graphics[i].operation === \"add\") {\n        bars[graphics[i].first].style.backgroundColor = this.state.pointerColor;\n        bars[graphics[i].second].style.backgroundColor =\n          this.state.pointerColor;\n        if (this.state.randomize === true) return;\n        await this.sleep(this.getSpeed(this.state.speed) / 2);\n        if (this.state.randomize === true) return;\n      }\n      if (graphics[i].operation === \"fix\") {\n        bars[graphics[i].first].style.backgroundColor = this.state.sortedColor;\n        bars[graphics[i].second].style.backgroundColor = this.state.sortedColor;\n      }\n      if (graphics[i].operation === \"remove\") {\n        bars[graphics[i].first].style.backgroundColor = this.state.barColor;\n        bars[graphics[i].first].style.backgroundColor = this.state.barColor;\n      }\n      if (graphics[i].operation === \"swap\") {\n        if (this.state.randomize === true) return;\n        await this.sleep(this.getSpeed(this.state.speed) / 2);\n        if (this.state.randomize === true) return;\n        gValue = bars[graphics[i].first].innerHTML;\n        gWidth = bars[graphics[i].first].style.width;\n        bars[graphics[i].first].innerHTML = bars[graphics[i].second].innerHTML;\n        bars[graphics[i].first].style.width =\n          bars[graphics[i].second].style.width;\n        bars[graphics[i].second].innerHTML = gValue;\n        bars[graphics[i].second].style.width = gWidth;\n        if (this.state.randomize === true) return;\n        await this.sleep(this.getSpeed(this.state.speed) / 2);\n        if (this.state.randomize === true) return;\n      }\n    }\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  quickSort(arr, low, high, graphics, sorted) {\n    if (low < high) {\n      let pi = this.partition(arr, low, high, graphics, sorted);\n      this.quickSort(arr, low, pi - 1, graphics, sorted);\n      this.quickSort(arr, pi + 1, high, graphics, sorted);\n    }\n  }\n\n  partition(arr, low, high, graphics, sorted) {\n    let g;\n    let pivot = arr[high];\n    let i = low - 1;\n    graphics.push(new Tuple(high, high, \"add\"));\n    for (let j = low; j <= high - 1; j++) {\n      graphics.push(new Tuple(j, j, \"add\"));\n      if (arr[j] < pivot) {\n        i++;\n        g = arr[i];\n        arr[i] = arr[j];\n        arr[j] = g;\n        graphics.push(new Tuple(i, j, \"add\"));\n        graphics.push(new Tuple(i, j, \"remove\"));\n        graphics.push(new Tuple(i, j, \"swap\"));\n      }\n      graphics.push(new Tuple(j, j, \"remove\"));\n    }\n    g = arr[i + 1];\n    arr[i + 1] = arr[high];\n    arr[high] = g;\n    graphics.push(new Tuple(i + 1, high, \"add\"));\n    graphics.push(new Tuple(i + 1, high, \"remove\"));\n    graphics.push(new Tuple(i + 1, high, \"swap\"));\n    graphics.push(new Tuple(high, high, \"remove\"));\n    for (let k = 0; k < arr.length; k++) {\n      if (arr[k] === sorted[k]) {\n        graphics.push(new Tuple(k, k, \"fix\"));\n      }\n    }\n    graphics.push(new Tuple(i + 1, i + 1, \"fix\"));\n    return i + 1;\n  }\n\n  async selectionSort() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let bars = document.getElementsByClassName(\"array-bar\");\n    let n = bars.length;\n    let m, r, gValue, gWidth;\n    for (let i = 0; i < n - 1; i++) {\n      m = i;\n      for (let j = i + 1; j < n; j++) {\n        r = m;\n        bars[r].style.backgroundColor = this.state.pointerColor;\n        bars[j].style.backgroundColor = this.state.pointerColor;\n        if (parseInt(bars[j].innerHTML) < parseInt(bars[m].innerHTML)) {\n          m = j;\n        }\n        if (this.state.randomize === true) return;\n        await this.sleep(this.getSpeed(this.state.speed));\n        if (this.state.randomize === true) return;\n        bars[r].style.backgroundColor = this.state.barColor;\n        bars[j].style.backgroundColor = this.state.barColor;\n      }\n      bars[i].style.backgroundColor = this.state.sortedColor;\n      gWidth = bars[i].style.width;\n      gValue = parseInt(bars[i].innerHTML);\n      bars[i].innerHTML = parseInt(bars[m].innerHTML);\n      bars[i].style.width = bars[m].style.width;\n      bars[m].innerHTML = gValue;\n      bars[m].style.width = gWidth;\n    }\n    bars[n - 1].style.backgroundColor = this.state.sortedColor;\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  sleep(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  getSpeed(speed) {\n    switch (speed) {\n      case \"Very Fast\":\n        return 25;\n      case \"Normal\":\n        return 250;\n      case \"Slow\":\n        return 500;\n      case \"Very Slow\":\n        return 1000;\n      default:\n        return 100;\n    }\n  }\n\n  getColor(barColor) {\n    switch (barColor) {\n      case \"Black\":\n        return \"#000000\";\n      case \"Cyan\":\n        return \"#00e6e6\";\n      case \"Green\":\n        return \"#026423d9\";\n      case \"Pink\":\n        return \"#e600e6\";\n      case \"Red\":\n        return \"#a70202d9\";\n      case \"Grey\":\n        return \"#424444c2\";\n      default:\n        return \"#000030ed\";\n    }\n  }\n\n  getBarHeight() {\n    let height =\n      (this.height - 250 - parseInt(this.state.size) * 5) /\n      parseInt(this.state.size);\n    return height;\n  }\n\n  getfontHeight() {\n    let fontHeight =\n      (this.height - 370 - parseInt(this.state.size) * 5) /\n      parseInt(this.state.size);\n    return fontHeight - 3;\n  }\n\n  getRandomElement() {\n    var max = 0;\n    var min = 50;\n    if (this.width < 768) max = (this.width * 8) / 10;\n    else max = (this.width * 6) / 10;\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }\n\n  render() {\n    return (\n      <div id=\"barView\">\n        {this.state.arr.map((value, idx) => (\n          <div\n            className=\"array-bar\"\n            key={idx}\n            style={{\n              width: `${value + 10}px`,\n              backgroundColor: `${this.state.barColor}`,\n              height: `${this.getBarHeight()}px`,\n              fontSize: `${this.getfontHeight()}px`,\n            }}\n          >\n            {value}\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default SortingVisualizer;\n"]},"metadata":{},"sourceType":"module"}